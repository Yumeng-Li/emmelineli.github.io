{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"Training Word Embedding on Bloomberg News","text":"While working from home (stuck at home indeed), I get a bit more time, so revisited some old deep learning notes last month. Would it be awesome if I can come up with a project to play with? As we all know knowledge would go rusty if lack of use! Initially, I was thinking about a machine translator using Attention Models, because I was once asked in an interview. The fund showed a particular interest in developing such a tool for the purpose of distributing research reports to non-English-speaking countries. But I was completely set back by the data sets asking for literally thousands of dollars… While if labeled dataset is that expensive, why not run some unsurprised learning? Training word2vec doesn’t sound like a bad idea. I’ve been writing some views on FICC (fixed income, currencies, and commodities) on my other non-geeky-at-all blog. Won’t it be fun to run word embeddings on Bloomberg news, see if people talk about the right things when they analyze inflation and gold prices? So here we go, rock and roll! First it’s a bit introduction to word embedding. The term refers to a set of techniques in natural language processing that can map words into high dimensional vectors of real numbers. The vectors/embeddings can be seen as featurized representations of words, which preserve semantic properties, hence are commonly used as inputs in NLP tasks. Here is an example, While in real cases, the dimension of vectors is usually a lot higher. We will use a tool called word2vec to convert words into embeddings, gensim has it implemented in a very easy-to-use way. Word2vec is a technique for natural language processing. The word2vec algorithm uses a neural network model to learn word associations from a large corpus of text. Once trained, such a model can detect synonymous words or suggest additional words for a partial sentence. More explanation on word2vec can be found here. Creating CorpusScarping Addresses of Bloomberg ArticlesI would like to run the embeddings only on the most recent posts, so first need to grab their urls through a search page. Import the libraries, 1234567import reimport requestsimport stringimport numpy as npimport gensim.models.word2vec as word2vecfrom bs4 import BeautifulSoupfrom time import sleep A function that can scrape the urls of articles that show up in the top p pages related to a specific topic, 123456789101112def scrape_bloomberg_urls(subject, maxPage, headers): urls = [] for p in range(1,maxPage): searchUrl = &apos;https://www.bloomberg.com/search?query=&apos; + subject + &apos;&amp;sort=relevance:desc&apos; + &apos;&amp;page=&apos; + str(p) response = requests.get(searchUrl, headers=headers) soup = BeautifulSoup(response.content, &apos;html.parser&apos;) regex = re.compile(&apos;.*headline.*&apos;) for tag in soup.findAll(&apos;a&apos;, {&quot;class&quot; : regex}, href = True): href = tag.attrs[&apos;href&apos;] if &apos;/news/articles/&apos; in href and href not in urls: urls.append(href) return urls Set up headers to pass to the request, websites have gone crazy about blocking robots, 1234567headers = { &apos;user-agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&apos;, &apos;referrer&apos;: &apos;https://google.com&apos;, &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;, &apos;Accept-Language&apos;: &apos;en-US,en;q=0.9&apos;, &apos;Pragma&apos;: &apos;no-cache&apos;} We get 155 articles here, not a large dataset so it may give us weird results, but should be good enough for an exercise, 12In: len(urls)Out: 155 1234567In: urls[:5]Out: [&apos;https://www.bloomberg.com/news/articles/2020-08-07/inflation-trend-a-friend-in-real-yield-contest-seasia-rates&apos;, &apos;https://www.bloomberg.com/news/articles/2020-08-06/blackrock-joins-crescendo-of-inflation-warnings-amid-virus-fight&apos;, &apos;https://www.bloomberg.com/news/articles/2020-08-06/china-inflation-rate-headed-for-0-on-cooling-food-prices-chart&apos;, &apos;https://www.bloomberg.com/news/articles/2020-08-06/inflation-binds-czechs-after-fast-rate-cuts-decision-day-guide&apos;, &apos;https://www.bloomberg.com/news/articles/2020-08-07/jpmorgan-rejects-threat-to-dollar-status-flagged-by-goldman&apos;] Parsing ArticlesThis step is to parse articles through the urls and save the corpus into a local text file. 123456789101112def parse_article(urls, headers): corpus = [] for url in urls: response = requests.get(url, headers=headers) soup = BeautifulSoup(response.content,&apos;lxml&apos;) for tag in soup.find_all(&apos;p&apos;): content = tag.get_text() cleanedContent = content.tra nslate(str.maketrans(&apos;&apos;, &apos;&apos;, string.punctuation)).lower() corpus.append(cleanedContent) seconds = np.random.randint(low=5, high=20) sleep(seconds) return corpus A function serves as a writer, 12345def write_to_txt(outdir, subject, contentList): outputfile = f&apos;{outdir}/{subject}.txt&apos; with open(outputfile, &apos;a&apos;) as file: for i in contentList: file.write(f&apos;{i}\\n&apos;) Run the functions, 12corpus = parse_article(urls, headers)write_to_txt(&apos;Documents/Blog/&apos;, &apos;corpus&apos;, corpus) Training the ModelNow that we have created the corpus, let’s train the model using word2vec from gensim. Gensim has a cool function LineSentence that can directly read sentences from a text file with one sentence a line. Now you probably get why I had the corpus saved this way. 12sentences = word2vec.LineSentence(&apos;corpus.txt&apos;)model = word2vec.Word2Vec(sentences, min_count=10, workers=8, iter=500, window=15, size=300, negative=50) The model I choose is using the Skip-Gram algorithm with Negative Sampling. Hyper-parameters above are what I find work well, see below for their definitions, just in case you would like to tune them yourself, size – Dimensionality of the word vectors. window – Maximum distance between the current and predicted word within a sentence. min_count – Ignores all words with total frequency lower than this. workers – Use these many worker threads to train the model (=faster training with multicore machines). negative – If &gt; 0, negative sampling will be used, the int for negative specifies how many “noise words” should be drawn (usually between 5-20). If set to 0, no negative sampling is used. Checking Out the ResultsThe goal of this exercise to find out what people talk about when they analyze inflation expectation (basically what currently drives the stock market, TIPS and metals to roar higher and higher) and gold (my favorite and probably the most promising asset in the next 10 years). Word2vev model can find words that have been used in a similar context with the word we care about. Here we employ a method most_similar to reveal them. Let’s first check out the words people usually mention when they talk about inflation. I print out the top 20 words. The meaningful ones are, “target”, “bank’s”, “bank” - of course central banks target on inflation and their monetary policies shape expectations. “nominal”, “negative”, “yields” - words usually describing rates, make sense. “food” - measure of inflation. “employment” - make a lot sense if you remember the Phillips curve. The results are actually very good, authors did understand and explain inflations well. 12345678910111213141516171819202122In: model.wv.most_similar(&apos;inflation&apos;,topn=20)Out:[(&apos;target&apos;, 0.25702178478240967), (&apos;strip&apos;, 0.18441016972064972), (&apos;securities&apos;, 0.18246109783649445), (&apos;full&apos;, 0.16774789988994598), (&apos;nominal&apos;, 0.16606125235557556), (&apos;bank’s&apos;, 0.162990003824234), (&apos;yields&apos;, 0.15935908257961273), (&apos;negative&apos;, 0.15806841850280762), (&apos;remain&apos;, 0.15371079742908478), (&apos;levels&apos;, 0.14426037669181824), (&apos;well&apos;, 0.1438026875257492), (&apos;current&apos;, 0.13828279078006744), (&apos;attractive&apos;, 0.13690069317817688), (&apos;showed&apos;, 0.1277044713497162), (&apos;bank&apos;, 0.12733221054077148), (&apos;food&apos;, 0.12377716600894928), (&apos;similar&apos;, 0.11955425888299942), (&apos;the&apos;, 0.11911500245332718), (&apos;employment&apos;, 0.11866464465856552), (&apos;keep&apos;, 0.11818670481443405)] Then let’s try it for gold. It’s good to see silver rank top, the two metals do hold a strong correlation despite the natures of them are very different, gold generally behaves as a bond of real rates, while silver should be viewed more as a commodity. (People make mistakes on this, see the story of Hunt Brothers) Other words are just descriptive, focusing on telling readers what’s going on in the markets. While this is not helpful, Bloomberg! People want to know why, you may want to talk more about real rates, inflation expectations, debt and global growth in the future. 1234567891011121314151617181920212223242526272829303132In: model.wv.most_similar(&apos;gold&apos;,topn=30)Out:[(&apos;gold’s&apos;, 0.26054084300994873), (&apos;silver&apos;, 0.25277888774871826), (&apos;ounce&apos;, 0.2523342967033386), (&apos;bullion&apos;, 0.2294640988111496), (&apos;2300&apos;, 0.22592982649803162), (&apos;spot&apos;, 0.2171008288860321), (&apos;climbing&apos;, 0.19733953475952148), (&apos;metal&apos;, 0.1939847469329834), (&apos;comex&apos;, 0.19371576607227325), (&apos;rally&apos;, 0.18643531203269958), (&apos;exchangetraded&apos;, 0.1859540343284607), (&apos;a&apos;, 0.18539577722549438), (&apos;delivery&apos;, 0.17595867812633514), (&apos;reaching&apos;, 0.1702871322631836), (&apos;strip&apos;, 0.16905872523784637), (&apos;posted&apos;, 0.16247007250785828), (&apos;lows&apos;, 0.16047437489032745), (&apos;as&apos;, 0.1585429608821869), (&apos;analysis&apos;, 0.1577225774526596), (&apos;2011&apos;, 0.15711694955825806), (&apos;precious&apos;, 0.15656355023384094), (&apos;threat&apos;, 0.1542907953262329), (&apos;more&apos;, 0.1541929841041565), (&apos;drive&apos;, 0.15310749411582947), (&apos;every&apos;, 0.1524747610092163), (&apos;analyst&apos;, 0.1517343521118164), (&apos;managing&apos;, 0.14977654814720154), (&apos;price&apos;, 0.1497490406036377), (&apos;amounts&apos;, 0.14969849586486816), (&apos;backed&apos;, 0.1450338065624237)]","link":"/2020/08/02/word2vec-on-bbg/"},{"title":"Project Covid Admissions Based on Vaccine Progress, Part 1 -- From Simple Linear Regression to Weighted Time Series Regression","text":"Lately I’ve been working on a project predicting credit losses for mortgages with a bunch of loan-level attributes. To be honest, the data wasn’t rich. In pursuit of good predictive power, I had to try from the simple multi-period regression, to generalized linear model with distributions beyond the Gaussian family, then mixed effect models, and even used some curve fitting techniques like splines at last to fix the oversimple (or wrong) assumptions I made at the beginning. Overall, I think the journey was inspiring as it basically shows that one can almost crack any problem with regression analysis, more importantly, in an elegant way. When it comes to predictive modeling, people always turn to linear regressions, which isn’t wrong, just so you know that linear regression models and OLS make a number of assumptions about the predictor variables, the response variable, and their relationship. Violating these assumptions can result in biased predictions or imprecise coefficients, in short cause your model to be less predictive. Well, the good news is that there are numerous extensions have been developed that allow each of these assumptions to be relaxed, and in some cases eliminated entirely, but only if you know what they are and when to use them. More commonly, I see people get stuck and choose to live with a just-fine-fit model without knowing that they can easily fix it by employing a more generalized regression models. Now let’s see how powerful regressions can get through a trendy modeling case - project covid admissions based on the vaccinate progress. Preliminaries12345678import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.colorsimport seaborn as snsimport statsmodels.api as smimport sysimport covid_analysis as covid # some functions developed for this blog The data I use includes hospital admissions and vaccinations from the CDC website, and the most up-to-date populations by state from the US Census Bureau. 1data_dir=&quot;../data&quot; 1234567891011hospitalizations=pd.read_csv(f&quot;{data_dir}/covid_hospitalizations.csv&quot;,parse_dates=[&quot;date&quot;])vaccinations=pd.read_csv(f&quot;{data_dir}/covid_vaccinations.csv&quot;,parse_dates=[&quot;date&quot;])population=pd.read_csv(f&quot;{data_dir}/population.csv&quot;)event=&quot;admissions&quot;data=hospitalizationsdata=data.merge(vaccinations,on=[&quot;date&quot;,&quot;state&quot;])data=data.merge(population,on=&quot;state&quot;)data[&quot;vaccinated&quot;]=data[&quot;vaccinated&quot;]/data[&quot;population&quot;]data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date state used_beds admissions vaccinated population 0 2021-06-10 MT 66.0 16.0 0.397597 1080577 1 2021-06-21 MT 57.0 13.0 0.411614 1080577 2 2021-08-05 MT 149.0 23.0 0.440153 1080577 3 2021-07-15 MT 62.0 9.0 0.431722 1080577 4 2021-08-21 MT 224.0 59.0 0.449196 1080577 Now we are good to go. As always, let’s first check on our old friend, simple linear regression with one single explanatory variable, as a warm-up. Here specifically, I am using weighted least squares rather than ordinary least squares to incorporate the knowledge of state populations. WLS is a generalization of OLS and a specialization of generalized least squares, which can relax the assumptions of constant variance, allowing the variances of the observations to be unequal i.e., heteroscedasticity (btw one of my favorite words in statistics, the pronunciation’s fun). Single Period RegressionModel DefinitionThe weighted linear regression model is defined as:\\begin{eqnarray} \\hat{y}_i &amp;= c + \\beta x_i \\newline y_i &amp;=\\hat{y}_i+ \\epsilon_i \\newline\\end{eqnarray}and we minimize the weighted least squares error :\\begin{equation} E_w = \\sum_i P_i(y - \\hat{y}_i)^2\\end{equation}where Each observation $i$ represents a single state. $\\hat{y}_i$ is the predicted probability of hospital admissions per persons on that state. $y_i$ is the actual number of events per person observed. $x_i$ is the percentage of the state population fully vaccinated. $P_i$ is the population of the state. $\\epsilon_i$ is a Gaussian uncorrelated noise with constant variance $\\sigma$ the parameters $c$ and $\\beta$ will be fitted to the observed data to maximize agreement with the model We first fit the regression model to single day of state hospitalization data. 1offset=9 # if we do not want to look at the last day, subtract here. Let’s take Aug.15, 12last_date=data[&quot;date&quot;].max()-pd.offsets.Day(offset)last_data=data[data[&quot;date&quot;]==last_date] 123X=sm.add_constant(last_data[&quot;vaccinated&quot;])P=last_data[&quot;population&quot;]Y=last_data[event]/last_data[&quot;population&quot;] Use statmodels for Weighted Linear RegressionLet’s first use the Weighted Linear Regression model from statmodels.The exact same estimation can be done by a different way, which I will show later. 123mod=sm.WLS(Y,X,P)res=mod.fit()res.params const 0.000127 vaccinated -0.000190 dtype: float64 So here’s our estimation of the coefficients and some statistics that are helpful for diagnosis. It’s easy to read that the R-squared is 0.327. But we can also calculate it ourselves. The R-square is defined as ratio of square loss to target variance, 123def square_error(y,y_hat,P): err=y-y_hat return np.sum(P*err**2) 1234Y_pred=res.predict(X)Y_bar=(Y*P).sum()/P.sum()R2=1 - square_error(Y,Y_pred,P)/square_error(Y,Y_bar,P)R2 0.3266337795171833 Use statmodels GLM for Weighted Linear RegressionExactly the same model can be written in the more general language of Generalized Linear models as Model DefinitionThe linear regression model is defined as:\\begin{eqnarray} &amp;\\eta_i &amp;=c + \\beta*x_i \\newline \\mathbb{E}(y_i|x_i) =&amp; \\hat{y}_i &amp;= \\eta_i \\newline &amp;p(y_i|x_i) &amp; = N(\\hat{y}_i,\\sigma)\\end{eqnarray} The fact that $\\eta_i=\\hat{y}_i$ means we are using the identity link between the Gaussian family and the linear model $\\eta$. One should be aware here that linear model is just a specical case of GLM. 123glm_model=sm.GLM(Y,X,family=sm.families.Gaussian(sm.families.links.identity()),var_weights=P)glm_res=glm_model.fit()glm_res.params const 0.000127 vaccinated -0.000190 dtype: float64 Results are the same. But with the GLM language we will be able to perform regression many more kinds of variables. The generalization of square error for a GLM model is called the deviance. This is the square error the Gaussian Family used in linear regression. Let’s calculate the in-sample R-squared in the GLM way and compare it with the previous. 1glm_res.deviance, square_error(Y,Y_pred,P) (0.12246143037040369, 0.12246143037040369) The resuls also include the deviance for the null model fitted to just a constant 1glm_res.null_deviance,square_error(Y,Y_bar,P) (0.1818645287591, 0.1818645287591) The ratio defines an $R^2$ value. Not surprisingly, the results are exactly the same. Overall, I admit a 32.7% R-squared model can barely be said to be a good model. But no worries, all can be fixed. 11-glm_res.deviance/glm_res.null_deviance 0.3266337795171833 Now, as we have a better understanding of the data and the modeling methodologies, let’s move on to model the time series. The data we have here is time series data, indeed panel data, as time series and cross-sectional data are both special cases of panel data that are in one dimension only. But we will deal with the multi-subjects matter in the next blog(probably should have a spoiler tag oops). Anyways, let’s first start with the multi-period regression, here I have trend variables added to the model to represent time. Multiple Period RegressionModel Definition\\begin{eqnarray} &amp;\\eta_i &amp;=c + \\beta_1 x_i + \\beta_2 t_i + \\beta_3 t_i^2 \\newline \\mathbb{E}(y_i|x_i) =&amp; \\hat{y}_i &amp;= \\eta_i \\newline &amp;p(y_i|x_i) &amp; = N(\\hat{y_i},\\sigma^2)\\end{eqnarray}where Each observation $i$ represents a single state at one particular date. $y_i$ is the number of events on that state. $\\hat{y}_i$ is the predicted number of events on that state. $x_i$ is the percentage of the state population fully vaccinated on that state. $t_i$ is the number of days elapsed since the beginning of the training period. $\\sigma^2$ is the level of noise of the observations (the variance of the residuals). the parameters $c$ and $\\beta_1,\\beta_2,\\beta_3$ will be fitted to the observed data to maximize agreement with the model This can be fitter as a linear model where the inputs are $x_i$, $t_i$ and $t_i^2$ First we select the training period: 1234start_train=&quot;2021-07-15&quot;end_train=&quot;2021-08-15&quot;train_data=data[(data[&apos;date&apos;] &gt;= start_train) &amp; (data[&apos;date&apos;] &lt;= end_train)].copy()date0=train_data[&quot;date&quot;].min() Then a 7-day testing period: 123test_period=7 # daystest_end=pd.Timestamp(end_train)+pd.DateOffset(days=test_period)test_data=data[(data[&quot;date&quot;]&gt;end_train) &amp; (data[&quot;date&quot;]&lt;=test_end)].copy() I write a function to generate the desired matrix, 123456789def define_variables(data,date0): N=len(data) T=(data[&quot;date&quot;]-date0).dt.days X=data[&quot;vaccinated&quot;].copy().to_frame() X[&quot;T&quot;]=T X[&quot;T2&quot;]=T**2 P=data[&quot;population&quot;] X[&quot;const&quot;]=np.ones(N) return X,P 1234X_train,P_train=covid.define_variables(train_data,date0)Y_train=train_data[event]/train_data[&quot;population&quot;]X_test,P_test=covid.define_variables(test_data,date0)Y_test=test_data[event]/test_data[&quot;population&quot;] Weighted Multi-period Linear Regression123mod=sm.WLS(Y_train,X_train,P_train)res=mod.fit()res.summary() WLS Regression Results Dep. Variable: y R-squared: 0.373 Model: WLS Adj. R-squared: 0.371 Method: Least Squares F-statistic: 322.3 Date: Tue, 21 Sep 2021 Prob (F-statistic): 3.12e-164 Time: 15:16:26 Log-Likelihood: 15151. No. Observations: 1632 AIC: -3.029e+04 Df Residuals: 1628 BIC: -3.027e+04 Df Model: 3 Covariance Type: nonrobust coef std err t P&gt;|t| [0.025 0.975] vaccinated -0.0002 6.13e-06 -24.647 0.000 -0.000 -0.000 T 1.038e-06 1.82e-07 5.686 0.000 6.8e-07 1.4e-06 T2 -1.18e-09 5.69e-09 -0.207 0.836 -1.23e-08 9.98e-09 const 8.1e-05 3.17e-06 25.544 0.000 7.48e-05 8.72e-05 Omnibus: 1418.486 Durbin-Watson: 0.372 Prob(Omnibus): 0.000 Jarque-Bera (JB): 43359.192 Skew: 4.022 Prob(JB): 0.00 Kurtosis: 26.936 Cond. No. 6.93e+03 Notes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 6.93e+03. This might indicate that there arestrong multicollinearity or other numerical problems. Calculate the R-squared again, still, not good enough.So let&apos;s take a deep dive and see where can be improved. 1234567Y_bar=np.sum(Y_train*P_train)/np.sum(P_train) # weighted averageY_pred=res.predict(X_train)deviance=square_error(Y_train,Y_pred,P_train)null_deviance=square_error(Y_train,Y_bar,P_train)R2=1-deviance/null_devianceR2 0.3726019173009557 Extrapolation of Time trendsThe linear model projects the admission to be increasing steadily if assuming current vaccination rate. 1covid.plot_time_extrapolation(train_data,res,event,date0) In-sample model FitTo better evaluate the model fit, we visualize the real observations and model prodictions. Here’s some snapshots of the fit for a few selected dates on the training period. Observations are arranged by state and date. Don’t have to say much, you can tell the weighted linear model doesn’t fit well as the corelation between vaccinations and admissions looks more like a curve than a straight line. 1covid.plot_time_facets(train_data,res,event,date0) We can further plot out the residuals. I choose one date from the dates above, Aug.15 and apply the following function to generate its residual plot. 1234567891011121314151617181920212223242526272829def plot_residuals(data,event,res): P=data[&quot;population&quot;] # Create two subplots and unpack the output array immediately f, (ax1, ax2) = plt.subplots(1, 2,sharex=True,figsize=(16,4)) norm=matplotlib.colors.LogNorm(vmin=100_000, vmax=P.max(), clip=False) m=ax1.scatter(data[&quot;vaccinated&quot;],data[event]/data[&quot;population&quot;]*100_000, c=P,norm=norm,cmap=&quot;Blues&quot;,label=event) plt.colorbar(m,label=&quot;State Population&quot;) x=np.linspace(0.3,0.75,201) x= pd.DataFrame({&apos;vaccinated&apos;:x, &apos;T&apos;:31, &apos;T2&apos;:31*31}) x[&quot;const&quot;]=np.ones(201) y_pred=res.predict(x) ax1.plot(x.vaccinated, y_pred*100_000,&quot;k--&quot;,label=&quot;predicted&quot;) idx = data.index ax2.scatter(data[&quot;vaccinated&quot;], res.resid[idx], c=P,norm=norm,cmap=&quot;Blues&quot;,label=event) ax2.set_ybound(lower=-0.00008,upper=0.00008) ax2.set_title(&quot;Residuals&quot;) ax2.set_xlabel(&quot;vaccination&quot;) ax2.set_ylabel(&quot;residual&quot;) # select outlier state outlier_idx=np.argpartition(np.array(res.resid[idx]), -2)[-2:] for i in outlier_idx: outlier=data.iloc[i] ax1.annotate(outlier[&quot;state&quot;],(outlier[&quot;vaccinated&quot;]+0.01,outlier[event]/outlier[&quot;population&quot;]*100_000)) ax2.annotate(outlier[&quot;state&quot;],(outlier[&quot;vaccinated&quot;]+0.01,res.resid[idx].iloc[i])) We can see that Predicted events can be negative for large vaccination rates, saying we are over estimating how fast the admission rate is increasing. residual variance is negatively correlated with vaccinations rate i.e., smaller vaccination rates have larger magnitude residuals. A Poisson model can fix those issues, which will be the topic of our next blog. Some states like FL and KY look like outliers, indicating that they may have different intercepts than the others, which is not surprising as states are different subjects and each may have unique fundamentals. A mixed model would be a good solution for this. 12plot_residuals(last_data,event,res) Model PredictionWe will now use the model without recalibrating to make predictions about admission rates on new data. This is out of sample evaluation. It is the only way to make sure the model really works. Out of Sample Model FitBesides greater residuals, the out of sample evaluation is basically telling us a same story. 1covid.plot_time_facets(test_data,res,event,date0) Day of the Week EffectsBefore we move on to GLM, there’s another trick to play with. The data reporting obviously has day of the week effects, 123aggregate=data.groupby([&quot;date&quot;])[event].sum()aggregate=aggregate.to_frame().reset_index()aggregate.plot(x=&quot;date&quot;,y=event) We use a new function to generate the train data, more dummy variables are added to represent days of a week, 1234567891011def define_variables2(data,date0): N=len(data) T=(data[&quot;date&quot;]-date0).dt.days X=data[&quot;vaccinated&quot;].copy().to_frame() X[&quot;T&quot;]=T X[&quot;T2&quot;]=T**2 X[&quot;const&quot;]=np.ones(N) Z=pd.get_dummies(data[&quot;date&quot;].dt.day_name(),drop_first=True) X=pd.concat([X,Z],axis=1) P=data[&quot;population&quot;] return X,P 12X_train,P_train=define_variables2(train_data,date0)X_train.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } vaccinated T T2 const Monday Saturday Sunday Thursday Tuesday Wednesday 2 0.440153 21 441 1.0 0 0 0 1 0 0 3 0.431722 0 0 1.0 0 0 0 1 0 0 6 0.435852 10 100 1.0 0 0 1 0 0 0 8 0.441906 24 576 1.0 0 0 1 0 0 0 10 0.437877 15 225 1.0 0 0 0 0 0 0 123mod=sm.WLS(Y_train,X_train,P_train)res=mod.fit()res.params vaccinated -1.510900e-04 T 1.028112e-06 T2 -6.639196e-10 const 8.186223e-05 Monday -2.235516e-06 Saturday -8.318830e-07 Sunday -3.189080e-06 Thursday -2.233662e-08 Tuesday 3.232847e-07 Wednesday -2.672040e-07 dtype: float64 1res.rsquared 0.37572844250241666 $R^2$ is 0.376, higher than the 0.373 we previously have. Day of the week provides a small improvement on $R^2$ compared to original model.","link":"/2021/09/21/projectcovid/"},{"title":"Project Covid Admissions Based on Vaccine Progress, Part 2 -- Generalized Linear Models, From Poisson Regression to Negative Binomial Regression","text":"In the last blog, we try to use linear regressions to model hospital admissions and vaccinations. The findings were the linear model tend to over-estimating how fast the admission rate is increasing on the higher range of vaccination rates, and residual variance is negatively correlated with vaccinations rates, suggesting heteroskedasticity. But it’s easy-peasy for Generalized linear models to fix those issues. GLM generalizes linear regression, 1. by allowing the linear model to be related to the response variable via a link function, 2. by allowing for the response variable to have an error distribution other than the normal distribution so that the magnitude of the variance of each measurement can change as a function of its predicted value. Preliminaries12345678910import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.colorsimport seaborn as snsimport statsmodels.api as smfrom statsmodels.discrete.discrete_model import Poissonfrom statsmodels.discrete.discrete_model import NegativeBinomialimport sysimport covid_analysis as covid The data I use includes hospital admissions and vaccinations from the CDC website, and the most up-to-date populations by state from the US Census Bureau. 1data_dir=&quot;../data&quot; 1234567891011hospitalizations=pd.read_csv(f&quot;{data_dir}/covid_hospitalizations.csv&quot;,parse_dates=[&quot;date&quot;])vaccinations=pd.read_csv(f&quot;{data_dir}/covid_vaccinations.csv&quot;,parse_dates=[&quot;date&quot;])population=pd.read_csv(f&quot;{data_dir}/population.csv&quot;)event=&quot;admissions&quot;data=hospitalizationsdata=data.merge(vaccinations,on=[&quot;date&quot;,&quot;state&quot;])data=data.merge(population,on=&quot;state&quot;)data[&quot;vaccinated&quot;]=data[&quot;vaccinated&quot;]/data[&quot;population&quot;]data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date state used_beds admissions vaccinated population 0 2021-06-10 MT 66.0 16.0 0.397597 1080577 1 2021-06-21 MT 57.0 13.0 0.411614 1080577 2 2021-08-05 MT 149.0 23.0 0.440153 1080577 3 2021-07-15 MT 62.0 9.0 0.431722 1080577 4 2021-08-21 MT 224.0 59.0 0.449196 1080577 Poisson RegressionLike what we did with the linear regression, we can choose either to use the Poisson Regression model from statsmodels, or the GLM from the same lib. The two will give us the exact same estimations and statistics. Model DefinitionWe have data from multiple dates, so it makes sense to incorporate Time as a extra variable. \\begin{eqnarray} &amp;\\eta_i &amp;=c + \\beta_1 x_i + \\beta_2 t_i + \\beta_3 t_i^2 \\newline \\mathbb{E}(y_i|x_i) =&amp; \\lambda_iP_i &amp;= e^{\\eta_i }P_i \\newline &amp;p(y_i|x_i) &amp; = \\text{Poisson}(y;\\lambda_i P_i)\\end{eqnarray}where Each observation $i$ represents a single state at one particular date. $y_i$ is the number of hospital admissions on that state. $x_i$ is the percentage of the state population fully vaccinated that state. $t_i$ is the number of days elapsed since the beginning of the training period. $P_i$ is the population of the state. the parameters $c$ and $\\beta_1,\\beta_2,\\beta_3$ will be fitted to the observed data to maximize agreement with the model We including coefficients for $t$ and $t^2$ the dependence of the admission rate on time can have some curvature and does not need to be linear. This can be fitter as a linear model where the inputs are $x_i$, $t_i$ and $t_i^2$ First we select the training period: 1234start_train=&quot;2021-07-15&quot;end_train=&quot;2021-08-15&quot;train_data=data[(data[&apos;date&apos;] &gt;= start_train) &amp; (data[&apos;date&apos;] &lt;= end_train)].copy()date0=train_data[&quot;date&quot;].min() Then a 7-day testing period: 123test_period=7 # daystest_end=pd.Timestamp(end_train)+pd.DateOffset(days=test_period)test_data=data[(data[&quot;date&quot;]&gt;end_train) &amp; (data[&quot;date&quot;]&lt;=test_end)].copy() 1234X_train,P_train=covid.define_variables(train_data,date0)Y_train=train_data[event]X_test,P_test=covid.define_variables(test_data,date0)Y_test=test_data[event] Fit the model to the train data, 123mod=Poisson(Y_train,X_train,exposure=P_train.values)res=mod.fit()res.summary() Optimization terminated successfully. Current function value: 32.115992 Iterations 6 Poisson Regression Results Dep. Variable: admissions No. Observations: 1632 Model: Poisson Df Residuals: 1628 Method: MLE Df Model: 3 Date: Sun, 26 Sep 2021 Pseudo R-squ.: 0.4493 Time: 19:44:49 Log-Likelihood: -52413. converged: True LL-Null: -95175. Covariance Type: nonrobust LLR p-value: 0.000 coef std err z P&gt;|z| [0.025 0.975] vaccinated -6.7589 0.030 -225.710 0.000 -6.818 -6.700 T 0.0750 0.001 75.492 0.000 0.073 0.077 T2 -0.0009 2.84e-05 -31.349 0.000 -0.001 -0.001 const -8.4423 0.015 -547.566 0.000 -8.473 -8.412 123mod=sm.GLM(Y_train,X_train,exposure=P_train,family=sm.families.Poisson(sm.families.links.log()))glm_res=mod.fit()glm_res.summary() Generalized Linear Model Regression Results Dep. Variable: admissions No. Observations: 1632 Model: GLM Df Residuals: 1628 Model Family: Poisson Df Model: 3 Link Function: log Scale: 1.0000 Method: IRLS Log-Likelihood: -52413. Date: Sun, 26 Sep 2021 Deviance: 95443. Time: 19:44:50 Pearson chi2: 1.26e+05 No. Iterations: 6 Covariance Type: nonrobust coef std err z P&gt;|z| [0.025 0.975] vaccinated -6.7589 0.030 -225.710 0.000 -6.818 -6.700 T 0.0750 0.001 75.492 0.000 0.073 0.077 T2 -0.0009 2.84e-05 -31.349 0.000 -0.001 -0.001 const -8.4423 0.015 -547.566 0.000 -8.473 -8.412 Poisson regression is fit by maximum likelihood, there are several choices of Pseudo R-squareHere, what statsmodels implements for poisson regression is McFadden $R_{McF}^2$ that is defined as ratio of log likelihood for the fitted model and log likelihood of a model fitted to just a constant. 12# Pseudo R-squ McFres.prsquared 0.4492953669633617 1res.llf, res.llnull (-52413.29834953645, -95174.97258108124) 11-res.llf/res.llnull 0.4492953669633617 Certainly, we can implement other measures of the Pseudo R-square ourselves. Here I did $R_{L}^2$, which is deviance-based. It’s the most analogous index to the squared multiple correlations in linear regression. We will stick to it in our analysis from now on. 12def poisson_deviance(y,y_pred): return 2*np.sum(y*np.log(np.maximum(y,1e-12)/y_pred)-(y-y_pred)) 12345678mu_train=Y_train.sum()/P_train.sum()Y_pred=glm_res.predict(X_train,exposure=P_train)deviance=poisson_deviance(Y_train,Y_pred)null_deviance=poisson_deviance(Y_train,mu_train*P_train)R2=1-deviance/null_deviance# Pseudo R-squR2 0.4725915412837366 If you don’t want bother yourself with the mathematical formulas, here’s a simpler way (my favorite as the laziest person ever). Just fit the model with a constant, and take the log-likelihood/deviance as your null case. 1234mod=sm.GLM(Y_train,X_train[&apos;const&apos;],exposure=P_train,family=sm.families.Poisson(sm.families.links.log()))res_null=mod.fit()# deviance for a const fit modelres_null.deviance 180966.73552551522 12# null deviance from our math formulanull_deviance 180966.7355255152 After all, the R-squared we have for now is 0.473. Next let’s check on how the model predicts. Extrapolation of Time trendsRemember what we saw last time with the linear model? Its projection was a straight line. But the poisson model is telling us a different story, that the admissions will flatten out assuming the current vaccination rate. Well, it is onto something, isn’t it? 1covid.plot_time_extrapolation(train_data,glm_res,event,date0) In-sample model FitTo better evaluate the model fit, we visualize the real observations and model predictions. Here’s some snapshots of the fit for a few selected dates on the training period. As we can see, curves from the poisson regression model fits the data much better than the linear model, indicating the correlation between admissions and vaccinations are not linear. 1covid.plot_time_facets(train_data,glm_res,event,date0) But is this enough? Certainly not, let’s verify the deviance residuals by visualizing them, 12345678910111213141516171819202122232425262728def plot_deviance_residuals(data,event,res): P=data[&quot;population&quot;] # Create two subplots and unpack the output array immediately f, (ax1, ax2) = plt.subplots(1, 2,sharex=True,figsize=(16,4)) norm=matplotlib.colors.LogNorm(vmin=100_000, vmax=P.max(), clip=False) m=ax1.scatter(data[&quot;vaccinated&quot;],data[event]/data[&quot;population&quot;]*100_000, c=P,norm=norm,cmap=&quot;Blues&quot;,label=event) plt.colorbar(m,label=&quot;State Population&quot;) x=np.linspace(0.3,0.75,201) x= pd.DataFrame({&apos;vaccinated&apos;:x, &apos;T&apos;:31, &apos;T2&apos;:31*31}) x[&quot;const&quot;]=np.ones(201) y_pred=res.predict(x) ax1.plot(x.vaccinated, y_pred*100_000,&quot;k--&quot;,label=&quot;predicted&quot;) idx = data.index ax2.scatter(data[&quot;vaccinated&quot;], res.resid_deviance[idx], c=P,norm=norm,cmap=&quot;Blues&quot;,label=event) ax2.set_title(&quot;Residuals&quot;) ax2.set_xlabel(&quot;vaccination&quot;) ax2.set_ylabel(&quot;residual&quot;) # select outlier state outlier_idx=np.argpartition(np.array(res.resid_deviance[idx]), -2)[-2:] for i in outlier_idx: outlier=data.iloc[i] ax1.annotate(outlier[&quot;state&quot;],(outlier[&quot;vaccinated&quot;]+0.01,outlier[event]/outlier[&quot;population&quot;]*100_000)) ax2.annotate(outlier[&quot;state&quot;],(outlier[&quot;vaccinated&quot;]+0.01,res.resid_deviance[idx].iloc[i])) The date I choose is Aug.15, 123offset=9 interested_date=data[&quot;date&quot;].max()-pd.offsets.Day(offset)interested_data=data[data[&quot;date&quot;]==interested_date] 1plot_deviance_residuals(interested_data,event,glm_res) The deviance residuals are defined as the signed square roots of the unit deviances, representing the contributions of individual samples to the deviance. The deviance indicates the extent to which the likelihood of the saturated model exceeds the likelihood of the proposed model. If the proposed model has a good fit, the deviance will be small. If the proposed model has a bad fit, the deviance will be high. Thus, the deviance residuals are analogous to the conventional residuals: when they are squared, we obtain the sum of squares that we use for assessing the fit of the model. However, while the sum of squares is the residual sum of squares for linear models, for GLMs, this is the deviance. 123deviance=poisson_deviance(Y_train,Y_pred)sum_of_squared_deviance_residuals = sum(glm_res.resid_deviance**2)deviance, sum_of_squared_deviance_residuals (95443.38706242564, 95443.38706242583) In a properly specified model, the deviance is approximately chi-square distributed with n-k-1 degrees of freedom, and the deviance residuals would be independent, standard normal random variables, i.e., ~ norm(0,1). So we would expect the residuals to be mostly in range of -1 to 1, and rarely fall outside the ± 3 limits. However, the model residuals are 10 times larger than expected and we say there is overdispersion. If overdispersion is present in a dataset, the estimated standard errors and test statistics, the overall goodness-of-fit will be distorted and adjustments must be made. A more appropriate model will be a Negative Binomial regression. Model PredictionWe will now use the model without recalibrating to make predictions about admission rates on new data. This is out of sample evaluation. It is the only way to make sure the model really works. Out of Sample $R^2$1234567test_admission_mean=Y_test.sum()/P_test.sum()Y_pred=glm_res.predict(X_test,exposure=P_test)null_deviance_test=poisson_deviance(Y_test,P_test*test_admission_mean)deviance_test=poisson_deviance(Y_test,Y_pred)R2 = 1-deviance_test/null_deviance_testR2 0.371917369051069 Out of sample $R^2$ is worse than for the in sample (approx. 0.473). I think we’ll all agree, predicting the future is hard. Negative Binomial RegressionModel DefinitionWe have data from multiple dates, so it makes sense to incorporate Time as a extra variable. \\begin{eqnarray} &amp;\\eta_i &amp;=c + \\beta_1 x_i + \\beta_2 t_i + \\beta_3 t_i^2 \\newline \\mathbb{E}(y_i|x_i) =&amp; \\lambda_i P_i &amp;= e^{\\eta_i } P_i \\newline &amp;p(y_i|x_i) &amp; = \\text{NB}(y_i; \\lambda_i P_i, \\alpha)\\end{eqnarray}where Each observation $i$ represents a single state at one particular date. $y_i$ is the number of hospital admissions on that state. $x_i$ is the percentage of the state population fully vaccinated that state. $t_i$ is the number of days elapsed since the beginning of the training period. $P_i$ is the population of the state. the parameters $c$ and $\\beta_1,\\beta_2,\\beta_3$ will be fitted to the observed data to maximize agreement with the model We including coefficients for $t$ and $t^2$ the dependence of the admission rate on time can have some curvature and does not need to be linear. This can be fitter as a linear model where the inputs are $x_i$, $t_i$ and $t_i^2$ Variance Comparison to Poisson ModelIntroducing a free additional parameter $\\alpha$ give more accurate models than simple parametric models like the Poisson distribution by allowing the mean and variance to be different, unlike the Poisson. The negative binomial distribution has a variance $\\hat{y}+\\hat{y}^2\\alpha$ . This can make the distribution a useful overdispersed alternative to the Poisson distribution. As we can see, with an extra parameter $\\alpha$ to control the variance, the expected variance of observations is larger with the Negative Binomial Model than with the Poisson model. 1234567alpha = 0.5y_hat=np.linspace(0,10,201)plt.plot(y_hat,y_hat,&quot;k--&quot;,label=&quot;Poisson&quot;)plt.plot(y_hat,y_hat+alpha*y_hat**2,&quot;k-&quot;,linewidth=3,label=&quot;Negative Binomial&quot;)plt.xlabel(r&quot;$\\hat{y}$&quot;)plt.ylabel(r&quot;Var($y|\\hat{y}$)&quot;)plt.legend() Choosing $\\alpha$Negative Binomial is a GLM model with an extra parameter $\\alpha$ that we must choose by maximizing the log likelihood. The train/test data we fit to the Negative Binomial Regression is the same as what we create at start. 123456789101112lls=[]alphas=np.linspace(0.1,0.5,500)for alpha in alphas: glm_model=sm.GLM(Y_train,X_train,exposure=P_train,family=sm.families.NegativeBinomial(sm.families.links.log(),alpha=alpha)) glm_res=glm_model.fit() ll=glm_res.llf lls.append(ll)plt.semilogx(alphas,lls) plt.xlabel(r&quot;$\\alpha$&quot;)plt.ylabel(&quot;Log Likelihood&quot;)alpha=alphas[np.argmax(lls)]print(&quot;alpha&quot;,alpha) alpha 0.3004008016032064 The best alpha is 0.3004 given a run of 500 times. Or easier, we can go for the Negative Regression model from statsmodels, which can do the dirty work, optimizing alpha for us. 1234#mod=sm.GLM(Y_train,X_train,exposure=P_train,family=nb)mod=NegativeBinomial(Y_train,X_train,exposure=P_train)res=mod.fit(method=&quot;lbfgs&quot;)res.summary() /opt/anaconda3/lib/python3.7/site-packages/statsmodels/discrete/discrete_model.py:2642: RuntimeWarning: divide by zero encountered in log llf = coeff + size*np.log(prob) + endog*np.log(1-prob) /opt/anaconda3/lib/python3.7/site-packages/statsmodels/discrete/discrete_model.py:2642: RuntimeWarning: invalid value encountered in multiply llf = coeff + size*np.log(prob) + endog*np.log(1-prob) /opt/anaconda3/lib/python3.7/site-packages/statsmodels/base/model.py:568: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals ConvergenceWarning) NegativeBinomial Regression Results Dep. Variable: admissions No. Observations: 1632 Model: NegativeBinomial Df Residuals: 1628 Method: MLE Df Model: 3 Date: Sun, 26 Sep 2021 Pseudo R-squ.: 0.08843 Time: 20:24:21 Log-Likelihood: -7946.2 converged: False LL-Null: -8717.1 Covariance Type: nonrobust LLR p-value: 0.000 coef std err z P&gt;|z| [0.025 0.975] vaccinated -6.7968 0.179 -38.019 0.000 -7.147 -6.446 T 0.0525 0.006 8.645 0.000 0.041 0.064 T2 -0.0002 0.000 -1.262 0.207 -0.001 0.000 const -8.4877 0.092 -92.109 0.000 -8.668 -8.307 alpha 0.3025 0.011 26.621 0.000 0.280 0.325 The alpha values are close, 123p=res.paramsnb=sm.families.NegativeBinomial(alpha=p[&quot;alpha&quot;])nb.alpha 0.3024936677385029 Compared to Poisson:- The regression coefficients are very similar.- The confidence intervals are much wider.- The t statistics are smaller because we assume a larger variance of residuals. In summary, switching from Poisson to Negative Binominal yields stable coefficient estimates, but a higher chance for the null hepothesis to be rejected and more reliable confidence intervals. The statsmodel.family.NegativeBinomial object knows how to compute deviance, and we use it to calculate the R squared, 123456mu_train=Y_train.sum()/P_train.sum()Y_pred=res.predict(X_train,exposure=P_train)deviance=nb.deviance(Y_train,Y_pred)null_deviance=nb.deviance(Y_train,mu_train*P_train)R2=1-deviance/null_devianceR2 0.5937123540474427 In-sample model Fit1covid.plot_time_facets(train_data,res,event,date0) Then most excitingly, let’s check out the deviance residuals again. The residuals are now well behaved, randomly fall into the range of -1 to 1. Though FL, KY and a few other states seem to be outliers. But no worries, we will address them in our next blog, using a more advanced method - mixed models. 1plot_deviance_residuals(interested_data,event,glm_res) Model PredictionFinally, always take a look at the out-of-sample fit. Though the R squared is not as good as the in-sample, but there’s still an improvement comparing to Poisson regression and the linear regressions. 1234567test_admission_mean=Y_test.sum()/P_test.sum()Y_pred=res.predict(X_test,exposure=P_test)null_deviance_test=nb.deviance(Y_test,P_test*test_admission_mean)deviance_test=nb.deviance(Y_test,Y_pred)R2 = 1-deviance_test/null_deviance_testR2 0.4595499732848517","link":"/2021/09/26/projectcovidGLM/"},{"title":"Project Covid Admissions Based on Vaccine Progress, Part 3 -- Mixed-effect models and Bayesian Inference","text":"In the last two blogs, we went through linear regression and generalized linear regression in search of the best solution to the covid data by relaxing the assumptions of linear regression and OLS. Based on what have done so far, our conclusion is negative binomial regression fit the data best. However, still, we have this problem that for some states with high vaccination rates, the increasing cases are over-estimated, and a few state such as FL and KY, are more like outliers to the model. Today, we are going to fixed these issues with the mixed-effects model, specifically, the generalized linear mixed-effects model(GLMM), which is very popular in biostatistics and econometrics, especially useful for economists when modeling cross-country macro data. A mixed-effects model contains both fixed effects and random effects. They are particularly useful in settings where measurements are made on clusters of related statistical units. There are several ways people usually choose to deal with this type of inherently “lumpy” data. 1. Pooled Data RegressionOne can run a regular regression on $y$ versus $x$ ignoring the group information, like what we have done in the last two blogs. It works but: It throws away useful information. Linear Regression assumes observations are independent here they are not. The $\\alpha$ and $\\beta$ coefficients are unbiased estimates (not bad). The confidence intervals will be too optimistic. 2. Unpooled Data RegressionInstead one can run a regression for each of the groups. One needs to estimate too many coefficients (51 $\\alpha$s and 51 $\\beta$s in our case). This results in unbiased, but very noisy estimates if some groups have few observations. 3. Pooled Slope, Unpooled InterceptWe can instead fit a regression with a dummy variable for each group. $$ y_i = \\alpha + \\beta x + \\rho^T Z_i$$where $\\rho$ is now a vector with as many coefficients as groups, and $Z$ is a vector of dummies, one column per group (we must leave one group out to avoid co-linearity of Z). This method: Pools information for the slope $\\beta$. Treats each group intercept independently. If some group $g$ has few examples $\\rho_g$ will be noisy. 4. Penalized Linear RegressionTo pool over the different groups, we can introduce a regression penalty to penalize model coefficients to reduce the model degrees of freedom. Theoretically, the correct penalty is proportional to the ration of variances for the observations $\\sigma_Y^2$ and the random effects $\\sigma_\\rho^2$. Because there is no penalty for $\\alpha$, the mean over all the population will be matched exactly. 5. Linear Mixed-effect ModelFor people who are familiar with penalized regressions and regularizations like lasso and rigid, the estimation of mixed models would be very straightforward as essentially, they are the same. Same result can be obtained with less work by fitting to a Linear Mixed Effect Model with statsmodels.mixed_linear module. 6. Generalized Linear Mixed-effects Model (GLMM)Today, as we already know that negative binomial distribution fits the covid data better, we will skip the linear mixed model and start with the non-linear GLMM. Since the model is relatively complex, we will be using a much cooler statistical inference method – Bayesian. Preliminaries12345678910import numpy as npimport pandas as pdimport matplotlibimport matplotlib.pyplot as pltimport matplotlib.cm as cmimport seaborn as snsimport pymc3 as pmimport arviz as azimport sysimport covid_analysis as covid As usual, let’s prepare the data. Hospital admissions and vaccinations are from the CDC website, and the most up-to-date populations by state are from the US Census Bureau. 1data_dir=&quot;../data&quot; 1234567891011hospitalizations=pd.read_csv(f&quot;{data_dir}/covid_hospitalizations.csv&quot;,parse_dates=[&quot;date&quot;])vaccinations=pd.read_csv(f&quot;{data_dir}/covid_vaccinations.csv&quot;,parse_dates=[&quot;date&quot;])population=pd.read_csv(f&quot;{data_dir}/population.csv&quot;)event=&quot;admissions&quot;data=hospitalizationsdata=data.merge(vaccinations,on=[&quot;date&quot;,&quot;state&quot;])data=data.merge(population,on=&quot;state&quot;)data[&quot;vaccinated&quot;]=data[&quot;vaccinated&quot;]/data[&quot;population&quot;]data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date state used_beds admissions vaccinated population 0 2021-06-10 MT 66.0 16.0 0.397597 1080577 1 2021-06-21 MT 57.0 13.0 0.411614 1080577 2 2021-08-05 MT 149.0 23.0 0.440153 1080577 3 2021-07-15 MT 62.0 9.0 0.431722 1080577 4 2021-08-21 MT 224.0 59.0 0.449196 1080577 Split the train and test data, 123456789# train datesstart_train=&quot;2021-07-15&quot;end_train=&quot;2021-08-15&quot;train_data=data[(data[&apos;date&apos;] &gt;= start_train) &amp; (data[&apos;date&apos;] &lt;= end_train)].copy()date0=train_data[&quot;date&quot;].min()# test datestest_period=7 # daystest_end=pd.Timestamp(end_train)+pd.DateOffset(days=test_period)test_data=data[(data[&quot;date&quot;]&gt;end_train) &amp; (data[&quot;date&quot;]&lt;=test_end)].copy() Here we write a function to generate our desired matrix. This time, we will need an extra step to label data by state. 12345678910def define_variables(data,date0): N=len(data) T=(data[&quot;date&quot;]-date0).dt.days/30 X=pd.DataFrame({&quot;const&quot;:np.ones(N)}) X[&quot;vaccinated&quot;]=data[&quot;vaccinated&quot;].values X[&quot;T&quot;]=T.values X[&quot;T2&quot;]=T.values**2 P=data[&quot;population&quot;].values Z=pd.get_dummies(data[&quot;state&quot;]) return X,Z,P 123X_train,Z_train,P_train=define_variables(train_data,date0)Y_train=train_data[event]G_train=Z_train.values.argmax(axis=1) We have 51 regions in total, 123# number of states/regionsK = G_train.max()+1K 51 123# all states/regionsstates=Z_train.columnsstates Index([&apos;AK&apos;, &apos;AL&apos;, &apos;AR&apos;, &apos;AZ&apos;, &apos;CA&apos;, &apos;CO&apos;, &apos;CT&apos;, &apos;DC&apos;, &apos;DE&apos;, &apos;FL&apos;, &apos;GA&apos;, &apos;HI&apos;, &apos;IA&apos;, &apos;ID&apos;, &apos;IL&apos;, &apos;IN&apos;, &apos;KS&apos;, &apos;KY&apos;, &apos;LA&apos;, &apos;MA&apos;, &apos;MD&apos;, &apos;ME&apos;, &apos;MI&apos;, &apos;MN&apos;, &apos;MO&apos;, &apos;MS&apos;, &apos;MT&apos;, &apos;NC&apos;, &apos;ND&apos;, &apos;NE&apos;, &apos;NH&apos;, &apos;NJ&apos;, &apos;NM&apos;, &apos;NV&apos;, &apos;NY&apos;, &apos;OH&apos;, &apos;OK&apos;, &apos;OR&apos;, &apos;PA&apos;, &apos;RI&apos;, &apos;SC&apos;, &apos;SD&apos;, &apos;TN&apos;, &apos;TX&apos;, &apos;UT&apos;, &apos;VA&apos;, &apos;VT&apos;, &apos;WA&apos;, &apos;WI&apos;, &apos;WV&apos;, &apos;WY&apos;], dtype=&apos;object&apos;) Mixed Negative Binomial Regression ModelModel DefinitionWe have data from multiple dates, so it makes sense to incorporate Time as a extra variable. \\begin{eqnarray} \\eta_{i,j} =&amp; \\beta_0 + \\beta_1 x_{i,j} + \\beta_2 t_{j} + \\beta_3 t_{j}^2 + \\rho_i\\newline \\rho_i \\sim &amp; N(0,\\sigma_{\\rho}^2) \\newline \\lambda_{i,j} =&amp; e^{\\eta_{i,j}} \\newline y_{i,j} \\sim &amp; \\text{NB}(y;\\lambda_{i,j} P_i,\\alpha)\\end{eqnarray}with priors\\begin{eqnarray} \\beta_0 \\sim &amp; N( \\bar{y},1) \\newline \\beta_i \\sim &amp; N(0,1) \\newline \\log \\sigma_\\rho \\sim &amp; N(0,1) \\newline \\log \\alpha \\sim &amp; N(0,1)\\newline\\end{eqnarray}where Each index $i$ represents a state in the US. Each index $j$ represents a particular date. $y_{i,j}$ is the number of hospital admissions on state $i$ at date $j$. the random effects (random intercept) $\\rho_i$ for different states $i$ are independent and have a normal distribution. It will be fit to the data. $x_{i,j}$ is the percentage of the state population fully vaccinated on state $i$ at date $j$. $t_j$ is the number of days elapsed since the beginning of the training period. $P_i$ is the population of state $i$. $\\bar{y}$ is log of the average per person incidence on the event in the US Population. the parameters and $\\beta_1,\\beta_2,\\beta_3$ will be fitted to the observed data to maximize agreement with the model. the parameter $\\sigma_\\beta$ is our prior uncertainty about the value of $\\beta_i$, it is set to 1. To estimate the model coefficients, we will go for full Bayesian. Bayesian ApproachUnlike the classical frequentist methods, in Bayesian analysis, a parameter is summarized by an entire distribution of values instead of one fixed value, and it provides a natural and principled way of combining prior information or expert knowledge with the data observed. Both Bayesian methods and classical methods have advantages and disadvantages, and there are some similarities. When the sample size is large, Bayesian inference often provides results for parametric models that are very similar to the results produced by frequentist methods. Some advantages to using Bayesian analysis include the following: It provides a natural and principled way of combining prior information with data, within a solid decision theoretical framework. You can incorporate past information about a parameter and form a prior distribution for future analysis. It provides interpretable answers based on parameter distributions, such as “the true parameter has a probability of 0.95 of falling in a 95% credible interval.” It provides a convenient setting for a wide range of complex models, such as the GLMM model we are trying to build but not easy to get an analytical solution. MCMC, along with other numerical methods, makes computations tractable for virtually all parametric models. The disadvantages of Bayesian are quite obvious as well: It does not tell you how to select a prior. There is no correct way to choose a prior. Bayesian inferences require skills to translate subjective prior beliefs into a mathematically formulated prior. It often comes with a high computational cost, especially in models with a large number of parameters. To solve our model with Bayesian approach, we have to specify the distributions of the parameters/variables. The good thing is that there are convenient functions provided by pymc3. 123Y_bar=np.log(Y_train.sum()/P_train.sum())beta0=np.array([Y_bar,0,0,0,])sigma_beta=np.array([1,1,1,1]) I choose $N(0,1)$ for $\\beta$s , and $lognormal(0,1)$ for $\\sigma_\\rho$s just to speed up the convergence. 123456789101112with pm.Model() as mod: beta=pm.Normal(&quot;beta&quot;,mu=beta0, sigma=sigma_beta, shape=(len(beta0)) ) lsigma_group=pm.Normal(&quot;lsigma_group&quot;,mu=0,sigma=1) sigma_group=pm.Deterministic(&quot;sigma_group&quot;,np.exp(lsigma_group)) rho=pm.Normal(&quot;rho&quot;,mu=0.0,sigma=sigma_group,shape=(K)) # a vector of K values eta=pm.math.dot(X_train.values,beta)+rho[G_train] y_hat=pm.Deterministic(&quot;eta&quot;,pm.math.exp(eta)) a=pm.Lognormal(&quot;alpha&quot;,mu=0,sigma=1) y=pm.NegativeBinomial(&quot;y&quot;,mu=y_hat*P_train,alpha=a,observed=Y_train) Then we can start the Monte Carlo sampling process. 4 chains, of which 1000 samples are generated. That means there will be 4000 samples for each of the parameters. Be patient, the computation can take a while. (Honestly, sometimes HOURS if using personal laptops) Monte Carlo Sampling12with mod: trace = pm.sample(1000,chains=4,cores=4, tune=500) Auto-assigning NUTS sampler... Initializing NUTS using jitter+adapt_diag... Multiprocess sampling (4 chains in 4 jobs) NUTS: [alpha, rho, lsigma_group, beta] Sampling 4 chains, 0 divergences: 100%|█████████████████████████████████████████| 6000/6000 [04:36&lt;00:00, 21.72draws/s] The acceptance probability does not match the target. It is 0.8915155058428972, but should be close to 0.8. Try to increase the number of tuning steps. The rhat statistic is larger than 1.05 for some parameters. This indicates slight problems during sampling. The estimated number of effective samples is smaller than 200 for some parameters. Regression CoefficientsOne of the advantages of Bayesian is that a parameter is summarized by a distribution of values instead of a fixed value, which definately helps us get a better understanding of the things going on, like how high the uncertainty is, how much confidence the model has in the estimations. 1234with mod: summary=az.summary(trace, var_names=[&quot;beta&quot;,&quot;sigma_group&quot;], fmt=&quot;wide&quot;,round_to=2)summary.index=[&quot;intercept&quot;,&quot;vaccinated&quot;,&quot;T&quot;,&quot;T2&quot;,&quot;sigma_group&quot;]summary .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mean sd hdi_3% hdi_97% mcse_mean mcse_sd ess_mean ess_sd ess_bulk ess_tail r_hat intercept -9.42 0.31 -10.06 -8.84 0.02 0.02 160.54 160.54 142.03 351.53 1.04 vaccinated -5.36 0.66 -6.57 -4.02 0.05 0.04 149.80 119.62 150.75 192.52 1.04 T 1.79 0.07 1.66 1.91 0.00 0.00 749.07 749.07 751.34 1212.85 1.01 T2 -0.37 0.06 -0.47 -0.25 0.00 0.00 916.41 916.41 917.97 1287.44 1.01 sigma_group 0.55 0.06 0.43 0.66 0.00 0.00 1010.83 1010.83 1001.36 1747.82 1.00 We can see the distribution of parameters very clearly, 12with mod: az.plot_trace(trace,var_names=[&quot;beta&quot;,&quot;sigma_group&quot;,&quot;alpha&quot;]) Random EffectsWe also get a distribution for the random, state specific, effects. 123with mod: random_effects=az.summary(trace, var_names=[&quot;rho&quot;], fmt=&quot;wide&quot;,round_to=2)random_effects.index=states 1random_effects.head(9) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mean sd hdi_3% hdi_97% mcse_mean mcse_sd ess_mean ess_sd ess_bulk ess_tail r_hat AK 0.03 0.09 -0.15 0.20 0.01 0.01 63.60 63.60 65.35 339.69 1.05 AL 0.55 0.12 0.33 0.77 0.01 0.01 88.48 88.48 86.71 428.54 1.04 AR 0.71 0.11 0.51 0.92 0.01 0.01 74.26 74.26 74.61 435.70 1.05 AZ 0.12 0.08 -0.04 0.27 0.01 0.01 49.42 49.42 51.50 317.49 1.06 CA 0.34 0.09 0.19 0.51 0.01 0.01 47.83 43.42 46.91 344.41 1.07 CO 0.16 0.09 -0.01 0.34 0.01 0.01 45.42 42.62 44.54 297.58 1.07 CT 0.10 0.13 -0.18 0.33 0.02 0.01 76.68 76.68 72.85 279.41 1.05 DC -0.31 0.12 -0.52 -0.09 0.01 0.01 75.16 75.16 74.36 724.17 1.04 DE -0.48 0.10 -0.67 -0.28 0.01 0.01 74.12 74.12 72.69 614.42 1.05 Comparing to the other states, states such as FL, KY which are seen as outliers in our previous models have much larger random effects. 1random_effects.loc[[&apos;FL&apos;,&apos;KY&apos;]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mean sd hdi_3% hdi_97% mcse_mean mcse_sd ess_mean ess_sd ess_bulk ess_tail r_hat FL 1.64 0.08 1.48 1.78 0.01 0.01 44.39 43.59 45.16 292.35 1.07 KY 0.99 0.08 0.85 1.16 0.01 0.01 45.57 44.32 47.46 324.94 1.06 In Sample PredictionsNow, let’s make some predictions and see how the mixed model works. 12345def select_data(data,periods): dates=data[&quot;date&quot;].unique() selected_dates=covid.select_dates(dates,periods) used_data=data.merge(selected_dates,on=&quot;date&quot;) return used_data.groupby(&quot;date&quot;) 1234567891011121314151617181920212223242526def plot_result(data,norm,ax): P=data[&quot;population&quot;] m=ax.scatter(data[&quot;vaccinated&quot;],data[event]/data[&quot;population&quot;]*100_000, c=P,norm=norm,cmap=&quot;Greys&quot;,label=event) ax.errorbar(data[&quot;vaccinated&quot;],data[&quot;y_pred&quot;],yerr=data[&quot;y_std&quot;],fmt=&quot;D&quot;,alpha=0.25, label=&quot;predicted&quot;)#,c=P,norm=norm,cmap=&quot;Blues&quot;,label=&quot;predicted&quot;) ax.set_xlabel(&quot;vaccinated&quot;) ax.set_ylabel(f&quot;{event} per 100k&quot;) ax.legend() return mdef plot_time_facets(data,event): # Create two subplots and unpack the output array immediately fig, axes = plt.subplots(2, 2, figsize=(14,12),sharey=True,sharex=True) P=data[&quot;population&quot;] norm=matplotlib.colors.LogNorm(vmin=100_000, vmax=P.max(), clip=False) count=0 for date,group in select_data(data,4): col=count %2 row=count //2 ax=axes[row][col] ax.set_title(date.strftime(&quot;%Y-%m-%d&quot;)) im=plot_result(group,norm,ax) count+=1 cbar = fig.colorbar(im, ax=axes.ravel().tolist(), shrink=0.5,label=&quot;population&quot;) 123with pm.Model() as mod: y_pred=pm.NegativeBinomial(&quot;y_pred&quot;,mu=y_hat*100_000,alpha=a,shape=(len(X_train))) posterior_predictive = pm.sample_posterior_predictive(trace, var_names=[&quot;y_pred&quot;]) 100%|█████████████████████████████████████████████████████████████████████████████| 4000/4000 [00:05&lt;00:00, 798.51it/s] Remember, there are 4000 sample predictions for each of the records, I won’t plot out all of them, but will do their means with one standard deviation of uncertainty. The error bars would make prefect graphical representations. 12predicted=posterior_predictive[&quot;y_pred&quot;]predicted.shape,train_data.shape ((4000, 1632), (1632, 6)) 123456y_pred_mean=predicted.mean(axis=0)y_pred_std=predicted.std(axis=0)data=train_data.copy()data[&quot;y_pred&quot;]=y_pred_meandata[&quot;y_std&quot;]=y_pred_std Looks like the predictions are closer to the actuals since we incorporate the random effects. Hooray! 1plot_time_facets(data,event) Differences comparing to linear regressionRandom InterceptsLet’s take a further look by state to better understand what I meant by random effects/intercepts. Below is all the observed data points marked by state. We can see that roughly the slopes of different groups are close, while the intercepts can vary. In case you wonder why the slopes are upward, that’s due to the passage of time, remember time is our explanatory variable as well, but we can only plot two dimensions. 12345678fig, ax = plt.subplots()P=data[&quot;population&quot;]norm=matplotlib.colors.LogNorm(vmin=100_000, vmax=P.max(), clip=False)m=ax.scatter(data[&quot;vaccinated&quot;],data[event]/data[&quot;population&quot;]*100_000, c=P,norm=norm,cmap=&quot;Greys&quot;,label=event, s = 5)ax.set_xlabel(&quot;vaccinated&quot;)ax.set_ylabel(f&quot;{event} per 100k by state&quot;)ax.legend() Let’s select three states in the middle to plot their predictions against actuals. 12345678910111213141516171819202122def plot_states(data, states, var): data = data[data[&apos;state&apos;].isin(states)] data = data.sort_values(&apos;vaccinated&apos;) x = data[var] y = data[&quot;y_pred&quot;] std = data[&quot;y_std&quot;] cmp=cm.get_cmap(&quot;tab10&quot;) plt.xlim([0.4475,0.466]) plt.scatter(x,y, c=&apos;black&apos;,s=15) colors = np.array([&apos;tab:blue&apos;,&apos;tab:green&apos;,&apos;tab:orange&apos;,&apos;tab:red&apos;]) for i in range(len(states)): s = states[i] ds = data[data[&apos;state&apos;]==s] x = ds[var] y = ds[&quot;y_pred&quot;] std = ds[&quot;y_std&quot;] color = colors[i] plt.plot(x,y,&apos;k-&apos;,color=color,linewidth=2.0, label=f&quot;predicted {s}&quot;) plt.fill_between(x,y+std,y-std,alpha=0.15,color=color) plt.xlabel(&quot;vaccinated&quot;) plt.ylabel(f&quot;{event} per 100k by state&quot;) plt.legend(loc=&quot;upper left&quot;) This shows clearly how the mixed model leverages all the data points to estimate the correlation (slope) between admissions and vaccinations, but at the same time allows states to have different starts (intercept) due to fundamental differences which we consider are random. 1plot_states(data,[&apos;KY&apos;,&apos;AK&apos;,&apos;KS&apos;],&quot;vaccinated&quot;) VarianceThe Bayesian approach gives the distributions of the predictions, so we don’t need to rack our brains for the analytical solution of the prediction band, instead, we can simply plot it out with the samples generated by pymc3. Here I used one unit of the sample standard deviation. As we can see, the variance of prediction is larger with greater admissions, meaning they are positively correlated, which is not what we’ve seen with the linear regression that the variance of dependent variable is always constant. So using GLMM based on a negative binomial distribution allows the magnitude of the variance to change as a function of the predicted value. 123456789def plot_state(data, state, color): data = data[data[&apos;state&apos;]==state] fig, ax = plt.subplots() ax.scatter(data[&quot;vaccinated&quot;],data[event]/data[&quot;population&quot;]*100_000,c=&apos;black&apos;,s=15,label=event) ax.errorbar(data[&quot;vaccinated&quot;],data[&quot;y_pred&quot;],yerr=data[&quot;y_std&quot;],fmt=&quot;o&quot;,alpha=0.25,c=color, label=&quot;predicted&quot;) ax.set_xlabel(&quot;vaccinated&quot;) ax.set_ylabel(f&quot;{event} per 100k&quot;) ax.legend() 1plot_state(data,&apos;KY&apos;,&apos;tab:blue&apos;) 1plot_state(data,&apos;FL&apos;,&apos;tab:green&apos;) Predicted Dependence on vaccination RateOne of the things that we are interested is that how does the vaccination rate impact the admissions? To see this better, I fixed the time at Aug.15, and let the vaccination rate to vary from 20% to 100%. 123456# given current time point, generate test set for vaccination rate from 20% to 100%V_N=201V=np.linspace(0.2,1,V_N)T=np.ones(V_N)T2=T**2X2_test=np.c_[np.ones(T_N),V,T,T2] 1234with pm.Model() as mod: eta2_pred=pm.math.dot(X2_test,beta) y_pred2=pm.Deterministic(&quot;y_pred2&quot;,pm.math.exp(eta2_pred)*100_000) posterior_predictive = pm.sample_posterior_predictive(trace, var_names=[&quot;y_pred2&quot;]) 100%|████████████████████████████████████████████████████████████████████████████| 4000/4000 [00:01&lt;00:00, 3891.10it/s] 1234# generate predicted mean and standard deviationpredicted=posterior_predictive[&quot;y_pred2&quot;]y_pred_mean=predicted.mean(axis=0)y_pred_std=predicted.std(axis=0) We can see that vaccinations and admissions are negatively correlated. And when vaccination rate is low, the prediction can be quite uncertain. 12345plt.plot(V,y_pred_mean,&quot;k--&quot;,linewidth=1)plt.fill_between(V,y_pred_mean+y_pred_std,y_pred_mean-y_pred_std,alpha=0.07,color=&quot;k&quot;)plt.fill_between(V,y_pred_mean+2*y_pred_std,y_pred_mean-2*y_pred_std,alpha=0.07,color=&quot;k&quot;)plt.xlabel(&quot;Vaccinated&quot;)plt.ylabel(f&quot;{event} per 100k&quot;) Predicted Time EvolutionThe other thing that we are most interested in is that how the third wave of covid19 is going to evolve. How many admissions are there going to be given the current vaccination rate? So I use the GLMM model to project the next two months from Aug.15th on. 123# given the average vaccination ratesmean_vac=(train_data[&quot;vaccinated&quot;]*train_data[&quot;population&quot;]).sum()/train_data[&quot;population&quot;].sum()mean_vac 0.48852180987716365 12345# generate test set for the past month and the next 2 monthsT_N=201T=np.linspace(0,3,T_N)T2=T**2X1_test=np.c_[np.ones(T_N),mean_vac*np.ones(T_N),T,T2] 1234with pm.Model() as mod: eta1_pred=pm.math.dot(X1_test,beta) y_pred1=pm.Deterministic(&quot;y_pred1&quot;,pm.math.exp(eta1_pred)*100_000) posterior_predictive = pm.sample_posterior_predictive(trace, var_names=[&quot;y_pred1&quot;]) 100%|████████████████████████████████████████████████████████████████████████████| 4000/4000 [00:01&lt;00:00, 3831.47it/s] 1234# generate predicted mean and standard deviationpredicted=posterior_predictive[&quot;y_pred1&quot;]y_pred_mean=predicted.mean(axis=0)y_pred_std=predicted.std(axis=0) The prediction tells us that the admission will peak in one and half month from Aug.15th, which is by the end of September. However, I would be careful as the model have low confidence when projecting beyond one month. Look at that wide confidential interval band after T=2. Basically, the reality can fall any where between the curve flattening out as early as the start of September to that we won’t be able to see a peak until mid October. But overall I am very optimistic as there’s at least 80% of chance that we’ll see it peaking before mid October. Eventually, we will get there. So hang in there, everyone!! 12345678T0=T[T&lt;1]plt.plot(T0,y_pred_mean[T&lt;1],&quot;k&quot;,linewidth=4,label=&quot;fitted&quot;)plt.plot(T,y_pred_mean,&quot;k--&quot;,linewidth=1,label=&quot;extrapolated&quot;)plt.fill_between(T,y_pred_mean+y_pred_std,y_pred_mean-y_pred_std,alpha=0.07,color=&quot;k&quot;)plt.fill_between(T,y_pred_mean+2*y_pred_std,y_pred_mean-2*y_pred_std,alpha=0.07,color=&quot;k&quot;,)plt.xlabel(&quot;T (months)&quot;)plt.ylabel(f&quot;{event} per 100k&quot;)plt.legend(loc=&quot;lower right&quot;) Officially we are done, cheers! I hope you find this project inspiring. And if you read it all the way through - congrats, you are an incredibly patient person, have a cookie!","link":"/2021/09/28/projectcovidmixed/"},{"title":"Predicting U.S. Consumption Behaviors Post-Pandemic Given Potential Paths of Monetary Policy Using VECM, Part 1","text":"It’s official on Nov.3rd that the Federal Reserve is winding down its aggressive pandemic-era asset purchasing, or as what we call “tapering”. The announcement actually didn’t come out as a surprise since Fed officials had been laying the groundwork for policy tightening as the economy gradually recovered from the Covid19 slump. Furthermore, due to the lately surging inflation readings, we are seeing traders start to bet on faster Fed hikes. So it seems interesting to get some ideas of how the post-pandemic consumption behaviors of the American households would be, and quantify the potential impact of policy shifting on these behaviors using two classic time series models - the Vector Autoregression (VAR) and the Vector Error Correction Model (VECM). Tribute to Christopher Sims who first promoted the use of VAR in empirical macroeconomics. We will build the models following the steps below, And before we get onto that, I will first introduce some of the economic theories behind predicting real consumption. Economic Intuitions BehindLet’s first recap some of the main determinants of private consumption, Disposable Income (in the current period) (+) Expectations (consumer confidence indexes, employment growth) (+) Wealth (stock market performance, housing prices) (+) Uncertainty (precautionary saving) (-) Availability of Credit (+) Real Interest Rate (?)    - Substitution effect (-)    - Income effect (+) You might remember that perhaps the simplest theories of consumption, Keynesian theories of consumption, would link private consumption to disposable income in the current period, and of course positively. So as disposable income goes up, private consumption is expected to go up as well. More sophisticated, forward looking models would give more prominence or link consumption not to disposable income today but to expectations about the evolution of disposable income in the future. A number of indicators that can be used to gauge these expectations, for example, consumer confidence index, employment growth or my personally preferred - yield spreads. These can be used as a proxy for expectations for future income. Another variable thought to be important by economists in terms of explaining the behavior of private consumption is wealth. In that sense, for this wealth channel, the performance of the stock market or even the behavior of housing prices, would have an impact on private consumption. Another important factor is uncertainty, which would actually have a negative association with private consumption because it would create incentives for what the economists called precautionary saving. So agents will try to create a buffer to be able to fall back on in case a bad shock hits. The availability of credit is also thought to be an important determinant with, obviously, a positive relationship. And finally, the real interest rate is also thought to be one of the important determinants of private consumption.The effect of real interest on consumption can be a little bit ambiguous. Perhaps the most straightforward or direct effectwould be what economists call a substitution effect where, as interest rates go up, the incentives to consume are reduced. So agents will have, on the contrary, incentives to save more. And therefore, an increase in rates will be linked to a decrease in private consumption. But on the other hand, it is also possible that if consumers are net savers the increase in interest ratesmight generate some additional income– what economists call an income effect–and this might actually lead to an increase in private consumption. Getting DataBased on the economic intuitions, I grabbed the following well-defined and organized economic data from the Federal Reserve Economic Data of the St. Louis Fed. The FRED allows modelers to write programs and build applications that retrieve data through an API provided. There is a list of packages/libraries that one can turn to, depending on one’s programming language. Since I have to model everything in Python as it’s compatible with the github blog, I use the library fredapi to request the data. However, in practice, I would probably go for EViews as most economists prefer and do. 12345678910111213141516import pandas as pdimport numpy as npfrom fredapi import Fredimport matplotlib.pyplot as pltfrom datetime import datetime%matplotlib inlineimport statsmodels.api as smfrom statsmodels.tsa.stattools import adfullerfrom statsmodels.tsa.stattools import kpssfrom statsmodels.tsa.api import VARfrom statsmodels.tsa.vector_ar import vecmfrom statsmodels.tsa import filterspd.options.display.max_colwidth = 50pd.options.display.max_rows = 400 1fred = Fred(api_key=your_key_string) The period I study is from 1962Q1 to 2021Q2, which ensures that the economic data that I am interested in all has a value. 12startDate = &apos;1962-01-01&apos;endDate = &apos;2021-04-01&apos; 1234def get_series_and_print_info(fred, series_id, startDate, endDate, name):    series = fred.get_series(series_id, observation_start=startDate, observation_end=endDate, frequency=&apos;q&apos;)    print(name+&apos;: &apos;+fred.get_series_info(series_id).title)    return series 123456789101112131415161718192021222324252627282930data = {}data[&apos;saving_rate&apos;] = get_series_and_print_info(fred, &apos;a072rc1q156sbea&apos;,startDate, endDate, &apos;saving_rate&apos;)data[&apos;ns&apos;] = get_series_and_print_info(fred, &apos;w986rc1q027sbea&apos;,startDate, endDate, &apos;ns&apos;)data[&apos;nnw&apos;] = get_series_and_print_info(fred, &apos;TNWBSHNO&apos;,startDate, endDate, &apos;nnw&apos;)data[&apos;nl&apos;] = get_series_and_print_info(fred, &apos;TCMILBSHNO&apos;,startDate, endDate, &apos;nl&apos;)data[&apos;na&apos;] = get_series_and_print_info(fred, &apos;TABSHNO&apos;,startDate, endDate, &apos;na&apos;)data[&apos;nfa&apos;] = get_series_and_print_info(fred, &apos;TFAABSHNO&apos;,startDate, endDate, &apos;nfa&apos;)data[&apos;interest_payments&apos;] = get_series_and_print_info(fred, &apos;b069rc1q027sbea&apos;,startDate, endDate, &apos;interest_payments&apos;)data[&apos;cpi&apos;] = get_series_and_print_info(fred, &apos;cpiaucsl&apos;,startDate, endDate, &apos;cpi&apos;)data[&apos;c_deflator&apos;] = get_series_and_print_info(fred, &apos;dpcerd3q086sbea&apos;,startDate, endDate, &apos;c_deflator&apos;)/100data[&apos;dff&apos;] = get_series_and_print_info(fred, &apos;DFF&apos;,startDate, endDate, &apos;dff&apos;)data[&apos;yield_3m&apos;] = get_series_and_print_info(fred, &apos;dgs3&apos;,startDate, endDate, &apos;yield_3m&apos;)data[&apos;yield_10y&apos;] = get_series_and_print_info(fred, &apos;irltlt01usq156n&apos;,startDate, endDate, &apos;yield_10y&apos;)data[&apos;prime_rate&apos;] = get_series_and_print_info(fred, &apos;dprime&apos;,startDate, endDate, &apos;prime_rate&apos;)data[&apos;m2&apos;] = get_series_and_print_info(fred, &apos;M2REAL&apos;,startDate, endDate, &apos;m2&apos;)data[&apos;ndy&apos;] = get_series_and_print_info(fred, &apos;dpi&apos;,startDate, endDate, &apos;ndy&apos;)data[&apos;rdy&apos;] = get_series_and_print_info(fred, &apos;dpic96&apos;,startDate, endDate, &apos;rdy&apos;)data[&apos;npiy&apos;] = get_series_and_print_info(fred, &apos;b703rc1q027sbea&apos;,startDate, endDate, &apos;npiy&apos;)data[&apos;ny&apos;] = get_series_and_print_info(fred, &apos;pincome&apos;,startDate, endDate, &apos;ny&apos;)data[&apos;ry&apos;] = get_series_and_print_info(fred, &apos;rpi&apos;,startDate, endDate, &apos;ry&apos;)data[&apos;nc&apos;] = get_series_and_print_info(fred, &apos;pcec&apos;,startDate, endDate, &apos;nc&apos;)data[&apos;rc&apos;] = get_series_and_print_info(fred, &apos;pcecc96&apos;,startDate, endDate, &apos;rc&apos;)data[&apos;nc_services&apos;] = get_series_and_print_info(fred, &apos;pcesv&apos;,startDate, endDate, &apos;nc_services&apos;)data[&apos;nc_durable_goods&apos;] = get_series_and_print_info(fred, &apos;pcdg&apos;,startDate, endDate, &apos;nc_durable_goods&apos;)data[&apos;unemp&apos;] = get_series_and_print_info(fred, &apos;unrate&apos;,startDate, endDate, &apos;unemp&apos;)data[&apos;house_prices&apos;] = get_series_and_print_info(fred, &apos;ussthpi&apos;,startDate, endDate, &apos;house_prices&apos;)data[&apos;mortgage_30y&apos;] = get_series_and_print_info(fred, &apos;MORTGAGE30US&apos;,startDate, endDate, &apos;mortgage_30y&apos;)data[&apos;consumer_confidence&apos;] = get_series_and_print_info(fred, &apos;CSCICP03USM665S&apos;,startDate, endDate, &apos;consumer_confidence&apos;)data[&apos;gov_debt&apos;] = get_series_and_print_info(fred, &apos;fygfdpun&apos;,startDate, endDate, &apos;gov_debt&apos;)data[&apos;gov_transfers&apos;] = get_series_and_print_info(fred, &apos;w211rc1q027sbea&apos;,startDate, endDate, &apos;gov_transfers&apos;)     saving_rate: Personal saving as a percentage of disposable personal income    ns: Net private saving: Households and institutions    nnw: Households and Nonprofit Organizations; Net Worth, Level    nl: Households and Nonprofit Organizations; Debt Securities and Loans; Liability, Level    na: Households and Nonprofit Organizations; Total Assets, Level    nfa: Households and Nonprofit Organizations; Total Financial Assets, Level    interest_payments: Personal interest payments    cpi: Consumer Price Index for All Urban Consumers: All Items in U.S. City Average    c_deflator: Personal consumption expenditures (implicit price deflator)    dff: Federal Funds Effective Rate    yield_3m: Market Yield on U.S. Treasury Securities at 3-Year Constant Maturity    yield_10y: Long-Term Government Bond Yields: 10-year: Main (Including Benchmark) for the United States    prime_rate: Bank Prime Loan Rate    m2: Real M2 Money Stock    ndy: Disposable Personal Income    rdy: Real Disposable Personal Income    npiy: Personal income receipts on assets: Personal dividend income    ny: Personal Income    ry: Real Personal Income    nc: Personal Consumption Expenditures    rc: Real Personal Consumption Expenditures    nc_services: Personal Consumption Expenditures: Services    nc_durable_goods: Personal Consumption Expenditures: Durable Goods    unemp: Unemployment Rate    house_prices: All-Transactions House Price Index for the United States    mortgage_30y: 30-Year Fixed Rate Mortgage Average in the United States    consumer_confidence: Consumer Opinion Surveys: Confidence Indicators: Composite Indicators: OECD Indicator for the United States    gov_debt: Federal Debt Held by the Public    gov_transfers: Personal current transfer payments 1df = pd.DataFrame(data) Since we are interested in predicting the real consumption, which means eliminating the effect of prices, nominal variables including consumption, disposable income and net wealth need to be converted into real terms. Here they are deflated by the price deflator for consumption (c_deflator). 1234df[&apos;rnw&apos;] = df[&apos;nnw&apos;]/df[&apos;c_deflator&apos;]df[&apos;rl&apos;] = df[&apos;nl&apos;]/df[&apos;c_deflator&apos;]df[&apos;ra&apos;] = df[&apos;na&apos;]/df[&apos;c_deflator&apos;]df[&apos;rfa&apos;] = df[&apos;nfa&apos;]/df[&apos;c_deflator&apos;] Data Visualization and Preliminary Analysis (Some Fun Ideas)Structural BreaksTo get a feel for the data, let’s plot log(rc/rdy) against log(rnw/rdy). Also regress log(rc/rdy) on a constant and log(rnw/rdy) and then examine the fitted residuals, looking for evidence of any structural changes in the relationship between consumption, disposable income and net wealth. 123456789101112131415fig, ax1 = plt.subplots()ax1.set_xlabel(&apos;Year&apos;)ax1.set_ylabel(&apos;rdy rl&apos;)ax1.plot(df[&apos;rc&apos;], color=&apos;tab:grey&apos;,label=&apos;real consumption&apos;)ax1.plot(df[&apos;rdy&apos;], color=&apos;tab:blue&apos;,label=&apos;real disposable income&apos;)ax1.plot(df[&apos;rl&apos;], color=&apos;tab:green&apos;,label=&apos;real liability&apos;)ax1.legend(loc=&apos;upper left&apos;)ax2 = ax1.twinx()  ax2.set_ylabel(&apos;rnw ra rfa&apos;) ax2.plot(df[&apos;rnw&apos;], color=&apos;tab:red&apos;,label=&apos;real net worth&apos;)ax2.plot(df[&apos;ra&apos;], color=&apos;tab:orange&apos;,label=&apos;real asset&apos;)ax2.plot(df[&apos;rfa&apos;], color=&apos;tab:purple&apos;,label=&apos;real fincl asset&apos;)ax2.legend(loc=&apos;lower right&apos;)fig.tight_layout() plt.show() 123456789101112131415161718data1 = df[&apos;rc&apos;]/df[&apos;rdy&apos;]data2 = df[&apos;rc&apos;]/df[&apos;rnw&apos;]data3 = df[&apos;rc&apos;]/df[&apos;rl&apos;]data4 = df[&apos;rc&apos;]/df[&apos;ra&apos;]data5 = df[&apos;rc&apos;]/df[&apos;rfa&apos;]fig, ax1 = plt.subplots()ax1.set_xlabel(&apos;Year&apos;)ax1.set_ylabel(&apos;rdy&apos;)ax1.plot(data1, color=&apos;tab:blue&apos;,label=&apos;rc/rdy&apos;)ax1.legend(loc=&apos;upper left&apos;)ax2 = ax1.twinx()  ax2.set_ylabel(&apos;rnw ra rfa&apos;) ax2.plot(data2, color=&apos;tab:red&apos;,label=&apos;rc/rnw&apos;)ax2.plot(data4, color=&apos;tab:orange&apos;,label=&apos;rc/ra&apos;)ax2.plot(data5, color=&apos;tab:purple&apos;,label=&apos;rc/rfa&apos;)ax2.legend(loc=&apos;upper right&apos;)fig.tight_layout() plt.show() 1234567891011121314151617data1 = np.log(df[&apos;rc&apos;]/df[&apos;rdy&apos;])data2 = np.log(df[&apos;rnw&apos;]/df[&apos;rdy&apos;])fig, ax1 = plt.subplots()color = &apos;tab:green&apos;ax1.set_xlabel(&apos;Year&apos;)ax1.set_ylabel(&apos;rc/rdy&apos;, color=color)ax1.plot(data1, color=color)ax1.tick_params(axis=&apos;y&apos;, labelcolor=color)ax2 = ax1.twinx()  color = &apos;tab:blue&apos;ax2.set_ylabel(&apos;rnw/rdy&apos;, color=color) ax2.plot(data2, color=color)ax2.tick_params(axis=&apos;y&apos;, labelcolor=color)fig.tight_layout()ax1.axvline(x=datetime(1975, 10, 1), color=&apos;k&apos;)ax1.axvline(x=datetime(2008, 7, 1), color=&apos;k&apos;)plt.show() Are there any structural breaks in the relationship before 1975Q4 and after 2008Q3? If so, we have to create dummies to allow for them. Let’s run a regression to further confirm it. 12345Y = np.log(df[&apos;rc&apos;]/df[&apos;rdy&apos;])X = np.log(df[&apos;rnw&apos;]/df[&apos;rdy&apos;])X = sm.add_constant(X)model = sm.OLS(Y,X)res = model.fit() 1234ax = res.resid[:-8].plot(style=&apos;.&apos;,grid=True)ax.xaxis.grid(True, linestyle=&apos;--&apos;, linewidth=0.25)ax.axvline(x=datetime(1975, 10, 1), color=&apos;k&apos;)ax.axvline(x=datetime(2008, 7, 1), color=&apos;k&apos;) Both the time plot and the regression of log(rc/rdy) on a constant and log(rnw/rdy) suggests that there were structural breaks around 1975Q4 and 2008Q3. Notice the consistently negative residuals till 1975Q4 and the wider gap between log(rc/rdy) and log(rnw/rdy) before 1976 compared to the gap after 1976. Another one is that household net worth and assets have increased at an accelerating rate after the 2008 global financial crisis (increasing rnw/rdy ratio). While at the same time, we don’t see a rising trend of consumption compared to income even though households have accumulated higher real net wealth benefited from the booming asset prices post-crisis, which is a quite different behavior compared to pre-crisis. These are strong suggestive evidence that structural breaks occurred around 1975Q4 and 2008Q3. But why? What are the drivers? Inequality and the Kondratiev theoryLet’s now take a look at the inequality data, which will give us better clues to our questions. Data is downloaded from the World Inequality Database WID. Buckets I selected are top 10%, middle 40% and the bottom 50% of the US population. 1234income_inequality = pd.read_csv(&apos;income_inequality.csv&apos;,index_col=0)wealth_inequality = pd.read_csv(&apos;wealth_inequality.csv&apos;,index_col=0)pretax_income = pd.read_csv(&apos;pretax_income.csv&apos;,index_col=0)net_wealth = pd.read_csv(&apos;net_wealth.csv&apos;,index_col=0) As we can tell from the following graphs, income inequality in the US has risen dramatically since the mid 1970s, see how the income of the top 10% grows whereas that of the middle and bottom classes remains nearly flat. This issue has drawn heightened attention in recent years (including me :D). In the past decade, economic observers have also become increasingly worried about “secular stagnation” - or a chronic shortfall of aggregate demand, fearing that this shortfall will constrain American economic growth in coming years. These two phenomena—rising inequality and chronic weakness of demand - are related. Specifically, since the marginal propensity to consume (MPC) is much lower at the higher wealth quintiles (for low-wealth households, the MPC is 10 times larger than it is for wealthy households, see this paper elaborating it), rising inequality transfers income from high MPC households in the bottom and middle of the income distribution to lower MPC households at the top. All else equal, this redistribution away from low- to high-saving households reduces consumption spending, which drags on demand growth. 1pretax_income.iloc[:,1:].plot(title=&apos;Pre-tax Income&apos;) 1net_wealth.iloc[:,1:].plot(title=&apos;Net Wealth&apos;)     &lt;matplotlib.axes._subplots.AxesSubplot at 0x23c76c39e48&gt; Due to the differences in income growth, we see a larger and larger wealth gap between groups. 1234567891011121314151617181920212223data1 = wealth_inequality[&apos;sw_p99p100&apos;]data2 = wealth_inequality[&apos;sw_p90p100&apos;]data3 = wealth_inequality[&apos;sw_p50p90&apos;]data4 = wealth_inequality[&apos;sw_p0p50&apos;]fig, ax1 = plt.subplots()color = &apos;tab:blue&apos;ax1.set_xlabel(&apos;Year&apos;)ax1.set_ylabel(&apos;Rich&apos;, color=color)ax1.plot(data1, color=&apos;royalblue&apos;,label=&apos;Share of p99p100&apos;)ax1.plot(data2, color=&apos;dodgerblue&apos;,label=&apos;Share of p90p100&apos;)ax1.tick_params(axis=&apos;y&apos;, labelcolor=color)ax1.legend(loc =&apos;center left&apos;)ax1.set_title(&apos;Wealth Inequality&apos;)ax2 = ax1.twinx()  color = &apos;tab:green&apos;ax2.set_ylabel(&apos;Poor&apos;, color=color) ax2.plot(data3, color=&apos;limegreen&apos;,label=&apos;Share of p50p90&apos;)ax2.plot(data4, color=&apos;lightgreen&apos;,label=&apos;Share of p0p50&apos;)ax2.tick_params(axis=&apos;y&apos;, labelcolor=color)fig.tight_layout() ax2.legend(loc =&apos;center right&apos;)plt.show() Based on the theory, we can assume that there is a negative correlation between income inequality and consumption. Here I created an inequality indicator using the difference in shares of wealth of the top 10% and the bottom 50%, so that we can further look into the change of inequality over the last half century. The long-term trend is estimated using the Hodrick–Prescott filter, which can smooth the data by getting rid of the short-term fluctuations (shorter cycles). 12345wealth_inequality.index = pd.to_datetime(wealth_inequality.index, format=&apos;%Y&apos;)# create a variable nw_inequlity for the wealth gap between top 10% and bottom 50%wealth_inequality[&apos;nw_inequality&apos;] = wealth_inequality[&apos;sw_p90p100&apos;]-wealth_inequality[&apos;sw_p50p90&apos;]# apply the Hodrick-Prescott filter to smooth the inequality data and estimate the long-term trendwealth_inequality[&apos;f_nw_inequality&apos;] = pd.DataFrame(filters.hp_filter.hpfilter(wealth_inequality[&apos;nw_inequality&apos;],lamb=6.25)[1]) 12345f, (ax1, ax2) = plt.subplots(1,2,figsize=(15,4))ax1.plot(wealth_inequality[&apos;nw_inequality&apos;])ax2.plot(wealth_inequality[&apos;f_nw_inequality&apos;])ax1.set_title(&apos;nw inequality&apos;)ax2.set_title(&apos;filtered nw inequality (trend)&apos;) Seeing the long-term inequity trend, it’s no wonder why we have identified two structural breaks. Actually up to now, if you are familiar with the theory of Kondratieff cycles, this probably starts to look quite interesting to you. Kondratiev waves (also called super-cycles, great surges, long waves, K-waves or the long economic cycle) are hypothesized cycle-like phenomena in the modern world economy. The phenomenon is closely connected with the technology life cycle. It is stated that the period of a wave ranges from forty to sixty years, the cycles consist of alternating intervals of high sectoral growth and intervals of relatively slow growth. Though there is a lack of agreement about both the cause of the waves and the start and end years of particular waves, inequity appears to be the most obvious driver, and yet some researchers have presented a technological and credit cycle explanation as well. However, among several modern timing versions of the cycles based on any of the causes, the consensus is that the start of our current cycle - Wave of the Information and Telecommunications Revolution falls into the range of early 1970s to mid 1980s, which happens to be the first break point we identified. Every wave of innovations lasts approximately until the profits from the new innovation or sector fall to the level of other, older, more traditional sectors. It is a situation when the new technology, which originally increased a capacity to utilize new sources from nature, reached its limits and it is not possible to overcome this limit without an application of another new technology. For the end of an application phase of any wave there is typically an economic crisis and economic stagnation. The financial crisis of 2007–2008 is viewed by some as a result of the coming end of the Wave of the Information and Telecommunications Revolution, our second break point. So after all, I create two dummy variables below to represent the turning points of the cycle. 12df[&apos;sb_1975_4&apos;] = np.where(df.index &lt; &apos;1976-10-1&apos;,0,1)df[&apos;sb_2008_3&apos;] = np.where(df.index &lt; &apos;2008-07-1&apos;,0,1) Long-run Model SpecificationNow let’s put aside the fun ideas and start model development with specifying the long-run predictive equation for real consumption. Consider the following long-run model for U.S. real consumption: \\begin{align}\\log rc_t &amp;= \\beta_0 + \\beta_1 \\log rdy_t + \\beta_1 \\log rnw_t + \\epsilon_t\\end{align} It’s helpful to express our model in logarithmic form, so that the parameter estimates are elasticities. 1234df[&apos;ln_rc&apos;] = np.log(df[&apos;rc&apos;])df[&apos;ln_rdy&apos;] = np.log(df[&apos;rdy&apos;])df[&apos;ln_rnw&apos;] = np.log(df[&apos;rnw&apos;])df[&apos;const&apos;] = 1 Sample and Forecast PeriodThe sample period for model specification i.e., specifying the preferred model for forecasting purposes can be 1962:1 to 2016:4 (and no later than 2007:4). Remember we have to stick with the train data from now on for the model development. The test set will be preserved for testing the predictive power of the model. 123cut = 220train,test = df[:cut], df[cut:]train.shape,test.shape     ((220, 39), (18, 39)) 1train.tail() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 saving_ratensnnwnlnanfainterest_paymentscpic_deflatordff...rnwrlrarfasb_1975_4sb_2008_3ln_rcln_rdyln_rnwconst2015-10-017.41026.97289638.83214191.141104202.90072619.083271.856237.8371.032860.16...86787.01082413739.655907100887.72921870308.737873119.3929249.50597811.37121212016-01-017.51046.17290792.56214181.444105350.15773464.821266.871237.6891.033400.36...87858.10141313723.092704101945.18773071090.401587119.4002319.51352511.38347812016-04-016.9969.63592170.18414313.771106862.97874353.858271.273239.5901.039890.37...88634.55173113764.697228102763.73270271501.656906119.4053019.51188511.39227712016-07-016.8961.21893991.42514497.803108869.33175700.352274.959240.6071.043790.39...90048.21372113889.578363104301.94866872524.503971119.4111429.51670511.40810112016-10-016.8974.32094743.72614601.767109726.27276056.719277.958242.1351.048720.45...90342.25150713923.418072104628.75886872523.379930119.4159789.52200211.4113611 5 rows × 39 columns Check for StationaryI’m going to pre-test the data to determine whether if it has a unit root, that is, whether it’s stationary or non-stationary. 1. What is stationarity?A stationary process is a stochastic process whose probability distribution does not change over time. For our work in time series analysis, we mostly care about stationarity in its weak form - covariance stationary. Covariance stationary: Constant mean:\\begin{align}&amp;E(y_t) = E(y_{t+1}) = \\mu\\end{align} Constant variance:\\begin{align}&amp;Var(y_t) = Var(y_{t+1}) = \\sigma^2\\end{align} Covariance depends on time that has elapsed between observations, not on reference period:\\begin{align}&amp;Cov(y_t,y_{t+j}) = Cov(y_s,y_{s+j}) = \\gamma_j\\end{align} To get an intuition of stationarity, one can imagine a frictionless pendulum. It swings back and forth in an oscillatory motion, yet the amplitude and frequency remain constant. Although the pendulum is moving, the process is stationary as its “statistics” are constant (frequency and amplitude). However, if a force were to be applied to the pendulum, either the frequency or amplitude would change, thus making the process non-stationary. 2. Why is stationarity important?Stationarity is one important assumption underlying in time series analysis as if the series is non-stationary, the shocks do not die out, the impact of disturbances become more influential over time and so gives a poor forecast accuracy. Consequences of non-stationarity The effect of a shock will diminish as time elapses Statistical consequences     - Non-normal distribution of test statistics     - Bias in autoregressive coefficients; we might mistakenly estimate an AR(1), deficient forecast     - Usual confidence intervals for coefficients not valid, poor forecast ability 3. How do we determine whether a time series is nonstationary?As always, visual inspection is one of the most useful ways to identify non stationary series. It looks that all of the curves obviously have a trend, which is definitely against the definition of stationarity. 1train[[&apos;ln_rc&apos;,&apos;ln_rdy&apos;,&apos;ln_rnw&apos;]].plot()     &lt;matplotlib.axes._subplots.AxesSubplot at 0x23c0007c248&gt; Then we can turn to statistical tests. The first would be Augmented Dickey-Fuller (ADF) Test, which tests for non-stationarity. Recall AR(1) model:\\begin{align}y_t =  by{t_1} + \\epsilon_t\\end{align} A special case is the random walk when $b = 1$. However, for stationarity, it requires $b&lt;1$. If generalizing to AR(p), it means that roots of the polynomial below must all be &gt;1 in abs value,\\begin{align}1 - b_1z -b_2z^2-b_3z^3-…-b_pz^p\\end{align} If one of the roots = 1, then it is said to have a unit root i.e., non-stationary. The ADF Test can test for the coefficient on $y_{t-1}$. Basically, it regresses y on its lag testing for significance of coefficient. I won’t go into great mathematical details, if anyone’s interested, check out this wiki page. However, ADF has been found to have low power in certain circumstances: stationary processes with near-unit roots. For example, it has difficulty distinguishing between b = 1 and b = 0.95, especially with small samples. Trend stationary processes. So alternative tests have been designed, which are Phillips–Perron (PP) Test and Kwiatkowski–Phillips–Schmidt–Shin (KPSS)Test. I usually prefer to use all three of them together, but here I would focus on ADF and KPSS as they have been implemented in statsmodels. A few notes: - ADF and PP are called unit root tests; the null hypothesis is that $y_t$ has a unit root; is I(1) or higher. - KPSS, on the other hand, is a stationarity test; the null hypothesis is that $y_t$ is I(0). - Correct specification is key. Intercept and trend should be included when appropriate as critical values for the t-statistics will vary depending on whether they are included. - Structural breaks can complicate matters further. That’s why we start this blog with detecting structural breaks. 1234567891011121314151617def augmented_dickey_fuller_test(time_series):    result = adfuller(time_series.values)    print(&apos;ADF Statistic: %f&apos; % result[0])    print(&apos;ADF p-value: %f&apos; % result[1])    if result[1]&lt;0.05:        print(&apos;stationary - null hypothesis of a unit root can be rejected at a 5% significance level&apos;)    else:        print(&apos;non-stationary - null hypothesis of a unit root cannot be rejected at a 5% significance level&apos;)def kpss_test(timeseries):    result = kpss(timeseries, regression=&quot;c&quot;)    print(&apos;KPSS Statistic: %f&apos; % result[0])    print(&apos;KPSS p-value: %f&apos; % result[1])    if result[1]&gt;=0.05:        print(&apos;stationary - null hypothesis of stationary cannot be rejected at a 5% significance level&apos;)    else:        print(&apos;non-stationary - null hypothesis of stationary can be rejected at a 5% significance level&apos;) 12augmented_dickey_fuller_test(train[&apos;ln_rc&apos;])kpss_test(train[&apos;ln_rc&apos;])     ADF Statistic: -1.949803    ADF p-value: 0.309007    non-stationary - null hypothesis of a unit root cannot be rejected at a 5% significance level    KPSS Statistic: 2.297233    KPSS p-value: 0.010000    non-stationary - null hypothesis of stationary can be rejected at a 5% significance level 12augmented_dickey_fuller_test(train[&apos;ln_rdy&apos;])kpss_test(train[&apos;ln_rdy&apos;])     ADF Statistic: -2.970069    ADF p-value: 0.037786    stationary - null hypothesis of a unit root can be rejected at a 5% significance level    KPSS Statistic: 2.292161    KPSS p-value: 0.010000    non-stationary - null hypothesis of stationary can be rejected at a 5% significance level 12augmented_dickey_fuller_test(train[&apos;ln_rnw&apos;])kpss_test(train[&apos;ln_rnw&apos;])     ADF Statistic: -0.266563    ADF p-value: 0.930108    non-stationary - null hypothesis of a unit root cannot be rejected at a 5% significance level    KPSS Statistic: 2.300497    KPSS p-value: 0.010000    non-stationary - null hypothesis of stationary can be rejected at a 5% significance level None of the variables can be considered stationary with the two tests. We can therefore ask whether the variables form a cointegrated system with a given number of “common trends”. Intuitively, I would argue that there exists one cointegration equation among the three variables as in the long run, one’s amount consumed and wealth accumulated should be equal to the income that one earns. We will discuss how to test for cointegration relationships and how to estimate them using a vector error correction model in the next blog.","link":"/2021/11/16/VECM/"},{"title":"Predicting U.S. Consumption Behaviors Post-Pandemic Given Potential Paths of Monetary Policy Using VECM, Part 2","text":"In the last blog, we went through the economic intuitions behind this consumption model, conducted some preliminary analysis in search for structural breaks and checked the stationarity of the endogenous variables using ADF and KPSS tests. Since we have found that none of the variables can be considered stationary, we can therefore ask whether the variables form a cointegrated system with a given number of “common trends”. Intuitively, I would argue that there exist one cointegration equation among the three variables as in the long run, one’s consumption and net wealth should add up to the income that one earns. So let’s move and see how we can test for cointegration and have it considered for forecasts using a VECM. Cointegration TestGiven that all variables are consistent with the unit root hypothesis and possibly cointegrated, we can use Johansen’s trace statistic to test for the existence of a common trend i.e., a long-run cointegration relationship among the three endogenous variables. First, we should estimate the VAR in levels so as to find out the optimal lags to use for the cointegration test. You might want to do this in first differences depending on your preferences, but basically the objective here is to run a preliminary VAR without worrying about whether the variables are cointegrated, which is obviously an issue given that they all have unit roots. VAR in LevelsI’m going to allow for 10 lags in the first instance just to get the process going, and these are the variables in the VAR as I include the dummy variables sb_1975_4, sb_2008_3 to allow for the possibility of a structural breaks. The BIC and HQ statistics suggest two lags for the optimal number of lags, whereas the AIC and FPE statistics suggest three. We choose the VAR model with three lags to allow for the possibility. 1train = train.iloc[1:] 123model = VAR(endog=train[[&apos;ln_rc&apos;,&apos;ln_rdy&apos;,&apos;ln_rnw&apos;]], exog =train[[&apos;sb_1975_4&apos;,&apos;sb_2008_3&apos;,&apos;const&apos;]])res = model.select_order(10)res.summary() VAR Order Selection (* highlights the minimums) AIC BIC FPE HQIC 0 -17.58 -17.39 2.310e-08 -17.51 1 -27.99 -27.66 6.975e-13 -27.86 2 -28.19 -27.71* 5.696e-13 -28.00* 3 -28.20* -27.58 5.664e-13* -27.95 4 -28.17 -27.40 5.829e-13 -27.86 5 -28.13 -27.22 6.067e-13 -27.76 6 -28.12 -27.07 6.144e-13 -27.69 7 -28.07 -26.87 6.488e-13 -27.58 8 -28.02 -26.68 6.810e-13 -27.48 9 -28.02 -26.53 6.807e-13 -27.42 10 -27.97 -26.33 7.217e-13 -27.31 Johansen Cointegration TestThen, we conduct the Johansen’s test with two lags. One has to ensure that the lag interval for thedifferenced endogenous variables is 1 smaller than the number of lags used in VAR in levels by moving to the corresponding VECM form. 123vec_rank = vecm.select_coint_rank(endog=train[[&apos;ln_rc&apos;,&apos;ln_rdy&apos;,&apos;ln_rnw&apos;]], det_order = 0, k_ar_diff = 2, method = &apos;trace&apos;, signif=0.05)print(vec_rank.summary())print(&apos;The rank to choose according to the Johansen test: &apos;+ str(vec_rank.rank)) Johansen cointegration test using trace test statistic with 5% significance level ===================================== r_0 r_1 test statistic critical value ------------------------------------- 0 3 33.75 29.80 1 3 11.44 15.49 ------------------------------------- The rank to choose according to the Johansen test: 1 The results suggest that we can reject the null hypothesis of no cointegration (or zero cointegrating vectors) using a 5% significance level. Moreover, we cannot reject the null hypotheses of at most 1 cointegrating vectors versus the alternative of 2. Therefore, we assume that there exists one (and only one) cointegrating vector. VECM EstimationSince there is cointegration relationship existing, we should construct an ECM equation (e.g., an error correction model) that can explain the actual behavior of consumption during the sample period based on the long-run specification. In developing the ECM model, we can include additional exogenous variables in the VECM to explain short-run dynamics of consumption. Besides the structural break around 1976 and the inequality gap, here are a bunch of other variables that we should consider. Remember the the determinants we discussed at the beginning? Disposable Income (in the current period) (+) Expectations (consumer confidence indexes, employment growth) (+) Wealth (stock market performance, housing prices) (+) Uncertainty (precautionary saving) (-) Availability of Credit (+) Real Interest Rate (?) Substitution effect (-) Income effect (+) Explore Exogenous VariablesIn developing the ECM model, we should include additional exogenous variables in the VECM to explain short-run dynamics of consumption. ExpectationsHere we use the unemployment rate and the consumer confidence index as exogenous variables. These variables are proxies for changes in the level of income uncertainty facing the household sector. 12345f, (ax1, ax2) = plt.subplots(1, 2,figsize=(14,4))ax1.plot(train[&apos;unemp&apos;])ax2.plot(train[&apos;unemp&apos;].diff().dropna())ax1.set_title(&apos;unemp&apos;)ax2.set_title(&apos;diff_unemp&apos;) 12345f, (ax1, ax2) = plt.subplots(1, 2,figsize=(14,4))ax1.plot(train[&apos;consumer_confidence&apos;])ax2.plot(np.log(train[&apos;consumer_confidence&apos;]))ax1.set_title(&apos;consumer_confidence&apos;)ax2.set_title(&apos;ln_consumer_confidence&apos;) Let’s then conduct the stationary tests for the change in the unemployment rate and the logarithm of the consumer confidence index, to check whether they are separately consistent with the stationarity assumption. 12augmented_dickey_fuller_test(train[&apos;unemp&apos;].diff().dropna())kpss_test(train[&apos;unemp&apos;].diff().dropna()) ADF Statistic: -5.032319 ADF p-value: 0.000019 stationary - null hypothesis of a unit root can be rejected at a 5% significant level KPSS Statistic: 0.048204 KPSS p-value: 0.100000 stationary - null hypothesis of stationary cannot be rejected at a 5% significant level 12augmented_dickey_fuller_test(np.log(train[&apos;consumer_confidence&apos;]))kpss_test(np.log(train[&apos;consumer_confidence&apos;])) ADF Statistic: -3.450606 ADF p-value: 0.009350 stationary - null hypothesis of a unit root can be rejected at a 5% significant level KPSS Statistic: 0.134007 KPSS p-value: 0.100000 stationary - null hypothesis of stationary cannot be rejected at a 5% significant level Availability of CreditEvidently, the availability and cost of credit will also affect decisions of households to consume. So the behavior of monetary aggregates in terms of the availability of credit and the interest rates in terms of the cost of credit will matter for our projections for private consumption. (Honestly, it would be ridiculous to ignore the crazy amount of money that the fed has been pumping into the economy since 2008 and its consequential impact. The hopeless belief in the Keynesian’s monetary policy.) 12345f, (ax1, ax2) = plt.subplots(1, 2,figsize=(14,4))ax1.plot(train[&apos;m2&apos;])ax2.plot(np.log(train[&apos;m2&apos;]).diff())ax1.set_title(&apos;real m2&apos;)ax2.set_title(&apos;diff real m2&apos;) 12345f, (ax1, ax2) = plt.subplots(1, 2,figsize=(14,4))ax1.plot(train[&apos;dff&apos;])ax2.plot(train[&apos;dff&apos;].diff())ax1.set_title(&apos;Federal Funds Effective Rate&apos;)ax2.set_title(&apos;Diff Federal Funds Effective Rate&apos;) 12augmented_dickey_fuller_test(np.log(train[&apos;m2&apos;]).diff().dropna())kpss_test(np.log(train[&apos;m2&apos;]).diff().dropna()) ADF Statistic: -5.040178 ADF p-value: 0.000018 stationary - null hypothesis of a unit root can be rejected at a 5% significant level KPSS Statistic: 0.172896 KPSS p-value: 0.100000 stationary - null hypothesis of stationary cannot be rejected at a 5% significant level Let’s adding these new variables to the dataframe. 1234567df[&apos;d_unemp&apos;] = df[&apos;unemp&apos;].diff()df[&apos;ln_consumer_confidence&apos;] = np.log(df[&apos;consumer_confidence&apos;])df[&apos;d_ln_m2&apos;] = np.log(df[&apos;m2&apos;]).diff()df[&apos;d_dff&apos;] = df[&apos;dff&apos;].diff()df[&apos;spread_10y3m&apos;] = df[&apos;yield_10y&apos;]-df[&apos;yield_3m&apos;]train,test = df[1:cut], df[cut:] Model EstimationBased on all previous analysis, we can eventually run a VECM. Based on the long-run equation, we specify the form of the model with three endogenous variables log(rc), log(rdy) and log(rnw), and allow for five additional exogenous variables. The lag intervals for the differenced endogenous variables are 2 given that we estimated the VAR with 3 lags in levels. 12endog = [&apos;ln_rc&apos;,&apos;ln_rdy&apos;,&apos;ln_rnw&apos;]exog = [&apos;sb_1975_4&apos;,&apos;sb_2008_3&apos;,&apos;d_unemp&apos;,&apos;ln_consumer_confidence&apos;, &apos;d_ln_m2&apos;, &apos;d_dff&apos;] 1234vec = vecm.VECM(endog = train[endog], exog =train[exog], k_ar_diff = 2, coint_rank = 1, deterministic = &quot;co&quot;, missing= &apos;drop&apos;)vecm_fit = vec.fit() The coefficients in the long-run equation are both statistically significantly different from zero (see the first three tables below), and most importantly, consistent with our economic priors i.e., income and wealth have positive coefficients on consumption (see parameters for ln_rdy and ln_rnw in the first table). For the exogenous variables, the negative coefficient on the structural breaks indicates that the increasing inequality may compress the consumption of households. Positive and significant coefficient on real m2 complies with our assumption that expanding monetary policy through quantitative ease may stimulate consumption in the short term. Also, the coefficient on the ECM term is negative and significant with respect to real consumption, and significant and positive with respect to disposable income, both using a 5% level of significance, which are reasonable since both consumption and income are endogenous variables and dependent on each other, a rational household would react to disequilibrim in consumption relative to its long-run path though simultaneous adjustments - lower their spending (negative coefficient) and increase their income (positive coefficient). From the “cointegration relations” table, we can verify our idea that in the long run, amount that one’s consumption and wealth accumulated would be equal to the income one earns. 1vecm_fit.summary().as_latex &lt;bound method Summary.as_latex of &lt;class &apos;statsmodels.iolib.summary.Summary&apos;&gt; &quot;&quot;&quot; Det. terms outside the coint. relation &amp; lagged endog. parameters for equation ln_rc ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ const -0.6625 0.154 -4.310 0.000 -0.964 -0.361 exog1 -0.0027 0.001 -3.309 0.001 -0.004 -0.001 exog2 -0.0052 0.001 -4.940 0.000 -0.007 -0.003 exog3 -0.0069 0.001 -4.782 0.000 -0.010 -0.004 exog4 0.1386 0.032 4.279 0.000 0.075 0.202 exog5 0.1697 0.033 5.189 0.000 0.106 0.234 exog6 0.0006 0.000 1.463 0.144 -0.000 0.001 L1.ln_rc -0.2099 0.068 -3.108 0.002 -0.342 -0.078 L1.ln_rdy 0.0742 0.043 1.739 0.082 -0.009 0.158 L1.ln_rnw 0.0485 0.022 2.248 0.025 0.006 0.091 L2.ln_rc -0.0623 0.063 -0.986 0.324 -0.186 0.062 L2.ln_rdy 0.0077 0.042 0.184 0.854 -0.074 0.090 L2.ln_rnw 0.0039 0.022 0.176 0.860 -0.039 0.047 Det. terms outside the coint. relation &amp; lagged endog. parameters for equation ln_rdy ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ const -0.2331 0.251 -0.928 0.353 -0.725 0.259 exog1 -0.0025 0.001 -1.879 0.060 -0.005 0.000 exog2 -0.0031 0.002 -1.777 0.076 -0.006 0.000 exog3 -0.0069 0.002 -2.937 0.003 -0.011 -0.002 exog4 0.0640 0.053 1.210 0.226 -0.040 0.168 exog5 0.1607 0.053 3.007 0.003 0.056 0.265 exog6 -0.0003 0.001 -0.445 0.656 -0.002 0.001 L1.ln_rc 0.1241 0.110 1.124 0.261 -0.092 0.340 L1.ln_rdy -0.1826 0.070 -2.620 0.009 -0.319 -0.046 L1.ln_rnw 0.0519 0.035 1.469 0.142 -0.017 0.121 L2.ln_rc -0.1472 0.103 -1.426 0.154 -0.350 0.055 L2.ln_rdy 0.0505 0.068 0.738 0.460 -0.084 0.184 L2.ln_rnw -0.0868 0.036 -2.421 0.015 -0.157 -0.017 Det. terms outside the coint. relation &amp; lagged endog. parameters for equation ln_rnw ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ const -1.4968 0.494 -3.028 0.002 -2.466 -0.528 exog1 0.0003 0.003 0.097 0.923 -0.005 0.005 exog2 -0.0009 0.003 -0.260 0.795 -0.007 0.006 exog3 -0.0024 0.005 -0.514 0.607 -0.011 0.007 exog4 0.3093 0.104 2.968 0.003 0.105 0.513 exog5 0.1839 0.105 1.748 0.080 -0.022 0.390 exog6 -0.0021 0.001 -1.576 0.115 -0.005 0.001 L1.ln_rc 0.1244 0.217 0.573 0.567 -0.301 0.550 L1.ln_rdy -0.2364 0.137 -1.723 0.085 -0.505 0.033 L1.ln_rnw 0.0856 0.069 1.232 0.218 -0.051 0.222 L2.ln_rc 0.2163 0.203 1.065 0.287 -0.182 0.615 L2.ln_rdy -0.2192 0.135 -1.629 0.103 -0.483 0.044 L2.ln_rnw 0.0711 0.071 1.008 0.314 -0.067 0.209 Loading coefficients (alpha) for equation ln_rc ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ ec1 -0.0605 0.020 -2.993 0.003 -0.100 -0.021 Loading coefficients (alpha) for equation ln_rdy ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ ec1 0.0887 0.033 2.684 0.007 0.024 0.153 Loading coefficients (alpha) for equation ln_rnw ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ ec1 -0.1382 0.065 -2.126 0.033 -0.266 -0.011 Cointegration relations for loading-coefficients-column 1 ============================================================================== coef std err z P&gt;|z| [0.025 0.975] ------------------------------------------------------------------------------ beta.1 1.0000 0 0 0.000 1.000 1.000 beta.2 -1.1175 0.073 -15.311 0.000 -1.261 -0.974 beta.3 0.0555 0.058 0.963 0.336 -0.057 0.168 ============================================================================== &quot;&quot;&quot;&gt; VECM ForecastOut-of-sample ForecastAs we are comfortable with the model estimated, let’s do some forecasting with the out-of-sample data and evaluate how the model works. To forecast for time beyond the sample period pre-2017, we need to provide futures shocks post-2017 i.e., the exogenous variables, which includes the dramatic economic downturn during the Covid recession. Let’s plot them out and get a feel. 12345678f, (ax1, ax2, ax3) = plt.subplots(1,3,figsize=(18,4))ax1.plot(test[&apos;d_unemp&apos;])ax2.plot(test[&apos;d_ln_m2&apos;])ax3.plot(test[&apos;d_dff&apos;])ax1.set_title(&apos;Diff Unemployment Rate&apos;)ax2.set_title(&apos;Diff Real M2&apos;)ax3.set_title(&apos;Diff Fed Fund Rate&apos;)f.autofmt_xdate() When forecasting, I include the confidence intervals for the predictions as well. Remember, point predictions won’t help you much with gauging the uncertainty of forecasts. 123456789mid, lower_1se, upper_1se = vecm_fit.predict(steps=len(test),alpha = 0.32, exog_fc =test[exog])_, lower_2se, upper_2se = vecm_fit.predict(steps=len(test),alpha = 0.05, exog_fc =test[exog])pred_mid = pd.DataFrame(np.exp(mid), columns=[&apos;pred_rc&apos;,&apos;pred_rdy&apos;,&apos;pred_rnw&apos;], index = test.index)pred_lower_1se = pd.DataFrame(np.exp(lower_1se), columns=[&apos;lower_1se_rc&apos;,&apos;lower_1se_rdy&apos;,&apos;lower_1se_rnw&apos;], index = test.index)pred_upper_1se = pd.DataFrame(np.exp(upper_1se), columns=[&apos;upper_1se_rc&apos;,&apos;upper_1se_rdy&apos;,&apos;upper_1se_rnw&apos;], index = test.index)pred_lower_2se = pd.DataFrame(np.exp(lower_2se), columns=[&apos;lower_2se_rc&apos;,&apos;lower_2se_rdy&apos;,&apos;lower_2se_rnw&apos;], index = test.index)pred_upper_2se = pd.DataFrame(np.exp(upper_2se), columns=[&apos;upper_2se_rc&apos;,&apos;upper_2se_rdy&apos;,&apos;upper_2se_rnw&apos;], index = test.index)ptest = pd.concat([test, pred_mid, pred_lower_1se, pred_upper_1se, pred_lower_2se, pred_upper_2se],axis = 1) The saving rate (percentage points) can be derived from total nominal consumption andnominal household disposable income using the following formula: $saving\\ rate=100*(rdy - (rc + (government\\ transfers + interest\\ payments/gdp\\ deflator))) /rdy$ 1ptest[&apos;pred_saving_rate&apos;]=100*(ptest.pred_rdy-(ptest.pred_rc+(ptest.gov_transfers+ptest.interest_payments/ptest.c_deflator)))/ptest.pred_rdy Now let’s see how the model predicts, 12345678910111213def plot_point_prediction(test): fig, axes = plt.subplots(2, 2, figsize=(12,8)) count=0 for endog in [&apos;rc&apos;,&apos;rdy&apos;,&apos;rnw&apos;,&apos;saving_rate&apos;]: col=count %2 row=count //2 ax=axes[row][col] ax.set_title(endog) ax.plot(test[endog], color=&apos;Black&apos;,linewidth=1, label=&quot;Observed&quot;) ax.plot(test[&apos;pred_&apos;+endog],color=&apos;grey&apos;,linestyle=&apos;--&apos;,linewidth=1, label=&quot;Forecast&quot;) ax.legend() count+=1 fig.autofmt_xdate() 1plot_point_prediction(ptest) The results are not so bad. Actually pretty dope pre-pandemic. For a model that is trying to predict for consumption three years out, its predictive accuracy is out-of-expectation. Though not surprisingly, the forecasts are over predicting actual real disposable income, real net wealth and therefore real consumption expenditures. This reflects the I(1) nature of the variables involved, the limited serial correlation in their innovation sequences, and the fact that all variables were trending upwards before the pandemic. Because of their I(1) nature, a dynamic forecast will effectively use the last known value (four years ago) of these variables to generate out-of-sample forecasts. Consequently, the forecasting model does not do good job of predicting the impact of covid19 on real consumption, and its predictions for the saving ratio appear to be systematically below the actual saving outcome. 12345678910111213def plot_forecast_with_confidence_intervals(df,test): fig, axes = plt.subplots(3, 1, figsize=(10,10)) count=0 for endog in [&apos;rc&apos;,&apos;rdy&apos;,&apos;rnw&apos;]: col=count ax=axes[col] ax.set_title(endog) ax.plot(df[endog], color=&apos;Black&apos;,linewidth=1.2,label=&quot;Observed&quot;) ax.plot(test[&apos;pred_&apos;+endog],&apos;k--&apos;,linewidth=0.7,label=&quot;Forecast&quot;) ax.fill_between(test[&apos;pred_&apos;+endog].index,test[&apos;lower_1se_&apos;+endog],test[&apos;upper_1se_&apos;+endog],alpha=0.07,color=&quot;k&quot;) ax.fill_between(test[&apos;pred_&apos;+endog].index,test[&apos;lower_2se_&apos;+endog],test[&apos;upper_2se_&apos;+endog],alpha=0.07,color=&quot;k&quot;) ax.legend(loc =&apos;upper left&apos;) count+=1 With that being said, the previous assessment considers only a single point prediction using the baseline model. A fairer assessment of the model can be made considering the confidential intervals for prediction, which suggest that the underlying model is useful for predicting the outcome of the consumption and net wealth. 1plot_forecast_with_confidence_intervals(df.iloc[200:],ptest) While there is obvious (downward) bias in the model’s predictions, it should be noted that this partly a reflection of the initial starting point of the forecast. If one begins the forecast after the pandemic, the resulting confidential intervals would be much closer to what observed. In this way, a static forecast which is one-period ahead forecasting would do a much better job. This is also how the model should be used in practice. As always, predicting future is difficult, trying to predict mutiple years out is meaningless. Long-run Forecasts Based on Potential Paths of Monetary PolicyNow it has come to a very interesting point. Let’s fit a VECM with the complete data from 1962 to 2021Q2, and use it to forecast for 2021Q3 onwards using two simulated forward paths of the Fed’s monetary policy. Correct assumptions would help us to get more accurate estimates for the long-run consumption, disposal income and net wealth of the American households after the pandemic. 123456endog = [&apos;ln_rc&apos;,&apos;ln_rdy&apos;,&apos;ln_rnw&apos;]exog = [&apos;sb_1975_4&apos;,&apos;sb_2008_3&apos;,&apos;d_unemp&apos;,&apos;ln_consumer_confidence&apos;, &apos;d_ln_m2&apos;,&apos;d_dff&apos;]vec = vecm.VECM(endog = df[endog], exog =df[exog], k_ar_diff = 2, coint_rank = 1, deterministic = &quot;co&quot;, missing= &apos;drop&apos;)vecm_fit = vec.fit() Let’s generate two paths for the forward monetary shocks. One path assumes that fed keeps its current pacing of assets purchasing i.e., no tapering, the other path assumes four interest rate hikes in 2022, 2023 and 2024 assuming the same pace as the period after the financial crisis from 2014Q4 to 2017Q3, with all the other exogenous variables being the same, specifically, current value for unemployment rate and the historical average for consumer confidence. 1234567891011121314forecast_range = pd.date_range(start=&apos;04/01/2021&apos;, end =&apos;01/01/2024&apos;,freq=&apos;QS&apos; )shocks = {}shocks = pd.DataFrame(shocks, index = forecast_range, columns = exog)shocks[&apos;sb_1975_4&apos;] = 1shocks[&apos;sb_2008_3&apos;] = 1shocks[&apos;d_unemp&apos;] = 0shocks[&apos;ln_consumer_confidence&apos;] = df[&apos;ln_consumer_confidence&apos;].mean()no_hikes_shocks = shocks.copy()no_hikes_shocks[&apos;d_ln_m2&apos;] = df.iloc[-4:][&apos;d_ln_m2&apos;].mean()no_hikes_shocks[&apos;d_dff&apos;] = 0.0four_hikes_shocks =shocks.copy()four_hikes_shocks[[&apos;d_ln_m2&apos;,&apos;d_dff&apos;]] = df.loc[&apos;2014-10-01&apos;:&apos;2017-07-01&apos;,[&apos;d_ln_m2&apos;,&apos;d_dff&apos;]].values Here’s how the money aggregates is going to be like if assuming no tapering until 2024, which would be of course totally insane… 12# change of log(real m2) and change of fed fund rateno_hikes_shocks[[&apos;d_ln_m2&apos;,&apos;d_dff&apos;]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } d_ln_m2 d_dff 2021-04-01 0.02268 0.0 2021-07-01 0.02268 0.0 2021-10-01 0.02268 0.0 2022-01-01 0.02268 0.0 2022-04-01 0.02268 0.0 2022-07-01 0.02268 0.0 2022-10-01 0.02268 0.0 2023-01-01 0.02268 0.0 2023-04-01 0.02268 0.0 2023-07-01 0.02268 0.0 2023-10-01 0.02268 0.0 2024-01-01 0.02268 0.0 Here’s a more likely path assumes that the fed would stop expanding its balance sheet from the forth quarter of 2021 and hike once in 2022 and three times at the end 2023 and beginning of 2024. This path is quite aggressive. (By the way, when central banks expend their balance sheets i.e., increase their net asset position, they literally buy asset assets or reduce their liability through money creation, which means writing checks to themselves.) 123# hike schedule - historical simulation using 2014-2017 data## change of log(real m2) and change of fed fund ratefour_hikes_shocks[[&apos;d_ln_m2&apos;,&apos;d_dff&apos;]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } d_ln_m2 d_dff 2021-04-01 0.015029 0.01 2021-07-01 0.025704 0.01 2021-10-01 0.003989 0.02 2022-01-01 0.007853 0.00 2022-04-01 0.013799 0.03 2022-07-01 0.022938 0.20 2022-10-01 0.009184 0.01 2023-01-01 0.011144 0.02 2023-04-01 0.009073 0.06 2023-07-01 0.008134 0.25 2023-10-01 0.010906 0.25 2024-01-01 0.005544 0.20 123456789101112mid_no_hikes = vecm_fit.predict(steps=12,exog_fc =no_hikes_shocks[exog])pred_mid_no_hikes = pd.DataFrame(np.exp(mid_no_hikes), columns=[&apos;pred_rc&apos;,&apos;pred_rdy&apos;,&apos;pred_rnw&apos;], index = forecast_range)mid, lower_1se, upper_1se = vecm_fit.predict(steps=12,alpha = 0.32, exog_fc =four_hikes_shocks[exog])_, lower_2se, upper_2se = vecm_fit.predict(steps=12,alpha = 0.05, exog_fc =four_hikes_shocks[exog])pred_mid = pd.DataFrame(np.exp(mid), columns=[&apos;pred_rc&apos;,&apos;pred_rdy&apos;,&apos;pred_rnw&apos;], index = forecast_range)pred_lower_1se = pd.DataFrame(np.exp(lower_1se), columns=[&apos;lower_1se_rc&apos;,&apos;lower_1se_rdy&apos;,&apos;lower_1se_rnw&apos;], index = forecast_range)pred_upper_1se = pd.DataFrame(np.exp(upper_1se), columns=[&apos;upper_1se_rc&apos;,&apos;upper_1se_rdy&apos;,&apos;upper_1se_rnw&apos;], index = forecast_range)pred_lower_2se = pd.DataFrame(np.exp(lower_2se), columns=[&apos;lower_2se_rc&apos;,&apos;lower_2se_rdy&apos;,&apos;lower_2se_rnw&apos;], index = forecast_range)pred_upper_2se = pd.DataFrame(np.exp(upper_2se), columns=[&apos;upper_2se_rc&apos;,&apos;upper_2se_rdy&apos;,&apos;upper_2se_rnw&apos;], index = forecast_range)pred = pd.concat([pred_mid, pred_lower_1se, pred_upper_1se, pred_lower_2se, pred_upper_2se],axis = 1) 123456789101112131415161718def plot_forecasts_given_different_paths(df,pred1,pred2): fig, axes = plt.subplots(3, 1, figsize=(10,10)) count=0 for endog in [&apos;rc&apos;,&apos;rdy&apos;,&apos;rnw&apos;]: col=count ax=axes[col] ax.set_title(endog) ax.plot(df[endog], color=&apos;Black&apos;,linewidth=1.2,label=&quot;Observed&quot;) ax.plot(pred1[&apos;pred_&apos;+endog],&apos;--&apos;,color=&apos;tab:blue&apos;, linewidth=1.5,label=&quot;Forecast - no hikes&quot;) ax.plot(pred2[&apos;pred_&apos;+endog],&apos;--&apos;,color=&apos;tab:red&apos;, linewidth=1.5,label=&quot;Forecast - four hikes&quot;) ax.fill_between(pred2[&apos;pred_&apos;+endog].index,pred2[&apos;lower_1se_&apos;+endog],pred2[&apos;upper_1se_&apos;+endog],alpha=0.07,color=&quot;tab:red&quot;) ax.fill_between(pred2[&apos;pred_&apos;+endog].index,pred2[&apos;lower_2se_&apos;+endog],pred2[&apos;upper_2se_&apos;+endog],alpha=0.07,color=&quot;tab:red&quot;) ax.legend(loc =&apos;upper left&apos;) ax.axvline(x=datetime(2022, 7, 1), color=&apos;tab:red&apos;) ax.axvline(x=datetime(2023, 7, 1), color=&apos;tab:red&apos;) ax.axvline(x=datetime(2023, 10, 1), color=&apos;tab:red&apos;) ax.axvline(x=datetime(2024, 1, 1), color=&apos;tab:red&apos;) count+=1 In March 2020, in response to the economic impact of the pandemic, the Fed acted quickly having learned its lesson from the financial crisis and cut short-term interest rates to zero. It also restarted its large-scale asset purchases and since June 2020, the Fed has been buying 80 billion of Treasury securities and 40 billion of mortgage-backed securities each month, with its balance sheet swelling from 4.4 trillion to 8.6 trillion. The extreme monetary support combined with a huge fiscal stimulus package holds the U.S economy and shields American household incomes. Though plots won’t be shown here, the model forecasts a much lower rdy and rnw if not taking into account the rapid increase of money base. Therefore, in the last 20 months, we all see the quick recovery of consumption and a rapid growth of asset prices, which is also reflected in the steeper slope of the third graph. However, as the economy rebounded, it may no longer need such extreme measures of support and keeping them in place could do more harm than good. For example, low mortgage rates have fueled a boom in house prices, but the problems that now afflict the economy are mostly supply issues while demand, which the bond buys most directly affects. Therefore, the policy makers may start to hit the brakes. That’s also why we are seeing Fed officials talking about tapering the pace of its bond purchases and lately laying the groundwork for higher rates. 1. Growth rates return to normalFirst it’s not surprising that real consumption, disposable income and household net wealth are projected to grow at milder rates comparing to those when the economy was bottoming out from the slump. As the stimulus aids wear off over time, one would expect the growth rates to normalize to pre-pandemic levels. 2. Growth differences taking expansionary and tight monetary policySecondly, assuming a tighter monetary policy to come, we project that the growth rate of real consumption throughout 2023 would slow down to 2.2% from 3.0%. The real income and net wealth of households would decrease from 3.9% and 9.1% to 2.4% and 6.5% respectively. At the end of 2023, all three measures would be lower than those come from the first path - that the Fed sticks to its current rate target and asset buying pace. In fact the amounts would be lowered by 1.8%, 3.3% and 4.8% respectively. 3. Foreseeable shallow decline in mid 2022Thirdly, we also notice that in the middle of 2022, the private consumption and household income would show a temporary and shallow decline and then grow at an annual rate again coming close to the path observed just before the pandemic. Likely this is caused by the tightening of policy in 2022. So far, Powell has announced that the fed will begin tapering this month, the first step toward pulling back on the massive amount of help it had been providing markets and the economy. One the fiscal side, though public programs to support households and businesses have been the most powerful engine of recovery from the hit, governments of the major economies now are hitting the brakes. The money they’ ll pull out of their economies in 2022 amounts to 2.5 percentage points of the world’s GDP, five times bigger than anything that happened during the turn to austerity after the 2008 crisis, according to UBS estimates. The fiscal tightening - the withdrawal of pandemic spending will likely have more impact on the global economy next year. 1plot_forecasts_given_different_paths(df.iloc[220:],pred_mid_no_hikes,pred)","link":"/2021/11/18/VECM2/"}],"tags":[],"categories":[{"name":"NLP","slug":"NLP","link":"/categories/NLP/"}]}